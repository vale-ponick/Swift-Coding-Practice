//
//  Arrays.swift
//  Swift-Coding-Practice
//
//  Created by –í–∞–ª–µ—Ä–∏—è –ü–æ–Ω–æ–º–∞—Ä–µ–≤–∞ on 07.09.2025.

import Foundation

public struct Chapter3_Arrays {
    public static func runAllTasks() {
        print("=== –ì–ª–∞–≤–∞ 3: –ú–∞—Å—Å–∏–≤—ã ===")
        task3_1()
        task3_2()
        task3_3()
        task3_4()
        task3_5()
        task3_6()
        // Arrays: Advanced Level
        task3a_1()
        task3ab_2()
        task3ac_1()
        task3a_2()
        task3aa_2()
        task3aaa_2()
        task3a_3()
        task3a_4()
        task3a_5()
        task3a_6()
        
        // –î–æ–±–∞–≤–ª—è–π—Ç–µ –Ω–æ–≤—ã–µ –∑–∞–¥–∞—á–∏ —Ç—É—Ç
    }
    
    static func task3_1() {
        print("–ó–∞–¥–∞—á–∞ 3.1: ..")
    }
    
    static func task3_2() {
        print("–ó–∞–¥–∞—á–∞ 3.2:...")
        let original = "Hello"
        let reversed = String(original.reversed())
        print("–û—Ä–∏–≥–∏–Ω–∞–ª: \(original), –†–µ–≤–µ—Ä—Å: \(reversed)")
    }
    
    static func task3_3() {
        print("–ó–∞–¥–∞—á–∞ 3.3: ..")
    }
    static func task3_4() {
        print("–ó–∞–¥–∞—á–∞ 3.4: ..")
    }
    static func task3_5() {
        print("–ó–∞–¥–∞—á–∞ 3.5: –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–∞–ª–∏–Ω–¥—Ä–æ–º–∞")
    }
    
    static func task3_6() {
        print("–ó–∞–¥–∞—á–∞ 3.6: –°–æ–∑–¥–∞–π—Ç–µ –º–∞—Å—Å–∏–≤ –∏–∑ —á–∏—Å–µ–ª = –∫—É–ø—é—Ä –≤ –¥–æ–ª–ª–∞—Ä–∞—Ö. –ü–æ—Å—á–∏—Ç–∞–π –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–µ–Ω–µ–≥ –∏ –≤—ã–≤–µ–¥–∏ –≤ –∫–æ–Ω—Å–æ–ª—å.")
        
        // Option 1: Loop
        let dollars = [100, 50, 2, 5, 5, 20, 10, 20, 50, 100, 1] // –∫—É–ø—é—Ä—ã
        var summaViaLoop: Int = 0
        for dollar in dollars {
            summaViaLoop += dollar
        }
        print("Cash in wallet from circle: \(summaViaLoop)") // Cash in wallet from circle: 363
        
        // Option 1: Reduce
        let summaViaReduce = dollars.reduce(0, +)
        print("Cash in wallet from 'reduce': \(summaViaReduce)") // Cash in wallet from 'reduce': 363
        
        // Verification
        print("Do the results match? \(summaViaReduce == summaViaLoop)") // Do the results match? true
    }
    
    // Arrays: Advanced Level
    
    static func task3a_1() {
        print("–ó–∞–¥–∞—á–∞ 3a.1: –°–æ–∑–¥–∞–π 10 —Å—Ç—Ä–æ–∫ —Å –Ω–∞–∑–≤–∞–Ω–∏—è–º–∏ —Å—Ç—Ä–∞–Ω. –°–æ–∑–¥–∞–π –º–∞—Å—Å–∏–≤.")
        // Option 1:
        let france = "France"
        let italy = "Italy"
        let germany = "Germany"
        let czechRepublic = "Czech Republic"
        let denmark = "Denmark"
        let croatia = "Croatia"
        let ireland = "Ireland"
        let austria = "Austria"
        let sweden = "Sweden"
        let poland = "Poland"
        
        var euCountries: [String] = []
        
        euCountries.append(france)
        euCountries.append(contentsOf: [italy, germany, czechRepublic])
        euCountries.append(contentsOf: [denmark, croatia, ireland, austria, sweden, poland])
        
        print(euCountries) // ["France", "Italy", "Germany", "Czech Republic", "Denmark", "Croatia", "Ireland", "Austria", "Sweden", "Poland"]
        
        // Option 2:
        let europeanUnion = [
            "France",
            "Italy",
            "Germany",
            "Czech Republic",
            "Denmark",
            "Croatia",
            "Ireland",
            "Austria",
            "Sweden",
            "Poland"
        ]
        print(europeanUnion) // ["France", "Italy", "Germany", "Czech Republic", "Denmark", "Croatia", "Ireland", "Austria", "Sweden", "Poland"]
    }
    
    static func task3ab_2() {
        print("–ó–∞–¥–∞—á–∞ 3a.1: –ü—Ä–æ–≤–µ—Ä—å —Å—Ç—Ä–æ–∫–∏, –µ—Å–ª–∏ –≤ —Å—Ç—Ä–æ–∫–µ > 5 —Å–∏–º–≤–æ–ª–æ–≤ - –¥–æ–±–∞–≤—å –µ–µ –≤ –º–∞—Å—Å–∏–≤. –ù–æ –µ—Å–ª–∏ —Å—Ç—Ä–æ–∫–∞ —Å–æ–¥–µ—Ä–∂–∏—Ç –±—É–∫–≤—É –ê, –∑–∞–º–µ–Ω–∏ —ç—Ç—É –±—É–∫–≤—É –Ω–∞ –¥—Ä—É–≥—É—é –∏ –¥–æ–±–∞–≤—å –∏–∑–º–µ–Ω–µ–Ω–Ω—É—é —Å—Ç—Ä–æ–∫—É —Å –º–∞—Å—Å–∏–≤.")
        
        var resultArray: [String] = []
        
        // option 1: Loop with replacement logic
        
        let europeanUnion = [
            "France",
            "Italy",
            "Germany",
            "Czech Republic",
            "Denmark",
            "Croatia",
            "Ireland",
            "Austria",
            "Sweden",
            "Poland"
        ]
        for country in europeanUnion {
            if country.count > 6 {
                if country.contains("A") || country.contains("a") {
                    let modifiedCountry = country.replacingOccurrences(of: "a", with: "Y", options: .caseInsensitive)
                    resultArray.append(modifiedCountry)
                } else {
                    resultArray.append(country)
                }
            }
        }
        print("Option 1 result: \(resultArray)") // Option 1 result: ["GermYny", "Czech Republic", "DenmYrk", "CroYtiY", "IrelYnd", "YustriY"]
        
        // Option 2: Functional style
        
        let resArray = europeanUnion.filter { $0.count > 6 }.map { country in
            if country.contains("a") || country.contains("A") {
                return country.replacingOccurrences(of: "a", with: "Y", options: .caseInsensitive)
            } else {
                return country
            }
        }
        print("Option 2 result: \(resArray)") // Option 2 result: ["GermYny", "Czech Republic", "DenmYrk", "CroYtiY", "IrelYnd", "YustriY"]
        
        // COMMENTS:
        /*  –ß—Ç–æ –¥–µ–ª–∞–µ—Ç –∫–æ–¥:
         
         1. filter { $0.count > 6 } - –æ—Ç–±–∏—Ä–∞–µ—Ç —Å—Ç—Ä–∞–Ω—ã –¥–ª–∏–Ω–Ω–µ–µ 6 —Å–∏–º–≤–æ–ª–æ–≤
         2. map { ... } - –ø—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç –∫–∞–∂–¥—É—é —Å—Ç—Ä–∞–Ω—É –ø–æ –ø—Ä–∞–≤–∏–ª—É:
         
         –ï—Å–ª–∏ –µ—Å—Ç—å 'A' –∏–ª–∏ 'a' ‚Üí –∑–∞–º–µ–Ω—è–µ—Ç –Ω–∞ 'Y'
         –ï—Å–ª–∏ –Ω–µ—Ç ‚Üí –æ—Å—Ç–∞–≤–ª—è–µ—Ç –∫–∞–∫ –µ—Å—Ç—å  */
        
        // Option 3
        let modifyArray = europeanUnion
            .filter { $0.count > 6 }
            .map { $0.replacingOccurrences(of: "a", with: "Y", options: .caseInsensitive) }
        print(modifyArray) // ["GermYny", "Czech Republic", "DenmYrk", "CroYtiY", "IrelYnd", "YustriY"]
        
    }
    static func task3ac_1() {
        print("–ó–∞–¥–∞—á–∞ 3a.3: –ù–∞–π—Ç–∏ –≤—Å–µ —Å—Ç—Ä–∞–Ω—ã, –∫–æ—Ç–æ—Ä—ã–µ –∑–∞–∫–∞–Ω—á–∏–≤–∞—é—Ç—Å—è –Ω–∞ –±—É–∫–≤—É 'y' –∏ –ø–µ—Ä–µ–≤–µ—Å—Ç–∏ –∏—Ö –≤ –≤–µ—Ä—Ö–Ω–∏–π —Ä–µ–≥–∏—Å—Ç—Ä")
        
        // option 1: üê¢ 'Imperative style'
        
        let euroUnion = [
            "France",
            "Czech Republic",
            "Italy",
            "Denmark",
            "Croatia",
            "Ireland",
            "Austria",
            "Sweden",
            "Poland"
        ]
        
        var upperResult: [String] = []
        for country in euroUnion {
            if country.hasSuffix("y") {
                upperResult.append(country.uppercased())
            }
        }
        print(upperResult) // ["ITALY"]
        
        // option 2: ü¶Ö 'Functional style'
        let upperRes = euroUnion
            .filter { $0.last == "y" }
            .map { $0.uppercased() }
        
        print(upperRes) // ["ITALY"]
        
        // ‚ö° –î–µ–∫–ª–∞—Ä–∞—Ç–∏–≤–Ω—ã–π —Å—Ç–∏–ª—å (—ç–∫—Å–ø–µ—Ä—Ç–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å)
        
        // –¢–≤–æ—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è –∑–¥–µ—Å—å (–º–∞–∫—Å–∏–º—É–º 1 —Å—Ç—Ä–æ–∫–∞ —Ü–µ–ø–æ—á–∫–∏!)
        let result = euroUnion
            .filter { $0.last == "y" }
            .map { $0.uppercased() }
        print(result) // ["ITALY"]
        
        //
        let res = euroUnion
            .compactMap { $0.hasSuffix("y") ? $0.uppercased() : nil }
        print(res) // ["ITALY"]
        
        // COMMENTS:
        /*  üí° –ü–æ—á–µ–º—É compactMap –±–æ–ª–µ–µ –¥–µ–∫–ª–∞—Ä–∞—Ç–∏–≤–Ω—ã–π:
         
         1) –û–¥–Ω–∞ –æ–ø–µ—Ä–∞—Ü–∏—è –≤–º–µ—Å—Ç–æ –¥–≤—É—Ö (filter + map)
         2) –ë–æ–ª–µ–µ –≤—ã—Ä–∞–∑–∏—Ç–µ–ª—å–Ω–æ - "–ø—Ä–µ–æ–±—Ä–∞–∑—É–π –µ—Å–ª–∏ —É—Å–ª–æ–≤–∏–µ, –∏–Ω–∞—á–µ –ø—Ä–æ–ø—É—Å—Ç–∏"
         3) –õ—É—á—à–∞—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å - –æ–¥–∏–Ω –ø—Ä–æ—Ö–æ–¥ –ø–æ –º–∞—Å—Å–∏–≤—É  */
    }
    
    static func task3a_2() {
        print("–ó–∞–¥–∞—á–∞ 3a.2: –°–æ–∑–¥–∞–π—Ç–µ –º–∞—Å–∏–≤ –∏–∑ 6 –∑–Ω–∞—á–µ–Ω–∏–π –ª—é–±–æ–≥–æ —Ç–∏–ø–∞. –°–¥–µ–ª–∞–π—Ç–µ –ª–∏–Ω–µ–π–Ω—É—é —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫—É - 'Selection Sort'.")
            
            // option 1: üê¢ 'Imperative style'
            var nums = [90, 21, 1, 888, 12, 45] // –°–æ–∑–¥–∞–π –º–∞—Å—Å–∏–≤
            print("–ò—Å—Ö–æ–¥–Ω—ã–π –º–∞—Å—Å–∏–≤: \(nums)")
            
            let countNums = nums.count
            
            // 2. –í–Ω–µ—à–Ω–∏–π —Ü–∏–∫–ª
            for i in 0..<countNums - 1 {
                var minIndex = i // –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º: min —ç–ª–µ–º–µ–Ω—Ç - –ø–µ—Ä–≤—ã–π –≤ –Ω–µ–æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–π —á–∞—Å—Ç–∏
                
                // 3. –í–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π —Ü–∏–∫–ª (–õ–ò–ù–ï–ô–ù–´–ô –ü–†–û–•–û–î –¥–ª—è –ø–æ–∏—Å–∫–∞ –º–∏–Ω–∏–º—É–º–∞)
                for j in i + 1..<countNums {
                    if nums[j] < nums[minIndex] {
                        minIndex = j // –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω–¥–µ–∫—Å –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞
                    }
                }
                
                // 5. –ü–æ—Å–ª–µ —Ç–æ–≥–æ –∫–∞–∫ –Ω–∞—à–ª–∏ min –≤ –ù–ï–æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–π —á–∞—Å—Ç–∏, –º–µ–Ω—è–µ–º –µ–≥–æ –º–µ—Å—Ç–∞–º–∏ —Å —ç–ª–µ–º–µ–Ω—Ç–æ–º –Ω–∞ –ø–æ–∑–∏—Ü–∏–∏ i
                if minIndex != i {
                    nums.swapAt(i, minIndex) // –ë–æ–ª–µ–µ Swift-—Å–ø–æ—Å–æ–± –æ–±–º–µ–Ω–∞ —ç–ª–µ–º–µ–Ω—Ç–æ–≤
                }
            }
            
            // 6. –í—ã–≤–æ–¥ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ (–≤—ã–Ω–µ—Å–µ–Ω –∑–∞ –ø—Ä–µ–¥–µ–ª—ã —Ü–∏–∫–ª–∞)
            print("–û—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –º–∞—Å—Å–∏–≤: \(nums)") // –û—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –º–∞—Å—Å–∏–≤: [1, 12, 21, 45, 90, 888]
        }
    
    /*  –û–±—ä—è—Å–Ω–µ–Ω–∏–µ –∞–ª–≥–æ—Ä–∏—Ç–º–∞:
     
     - –í–Ω–µ—à–Ω–∏–π —Ü–∏–∫–ª (for i in 0..<countNums - 1) –ø—Ä–æ—Ö–æ–¥–∏—Ç –ø–æ –≤—Å–µ–º —ç–ª–µ–º–µ–Ω—Ç–∞–º –º–∞—Å—Å–∏–≤–∞, –∫—Ä–æ–º–µ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ
     - –í–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π —Ü–∏–∫–ª (for j in i+1..<countNums) –∏—â–µ—Ç min —ç–ª–µ–º–µ–Ω—Ç –≤ –Ω–µ–æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–π —á–∞—Å—Ç–∏ –º–∞—Å—Å–∏–≤–∞
     - –û–±–º–µ–Ω —ç–ª–µ–º–µ–Ω—Ç–æ–≤ - –º–µ–Ω—è–µ–º –º–µ—Å—Ç–∞–º–∏ —Ç–µ–∫—É—â–∏–π —ç–ª–µ–º–µ–Ω—Ç —Å –Ω–∞–π–¥–µ–Ω–Ω—ã–º min */
    
   // –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç —Å –≤—ã–≤–æ–¥–æ–º –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—ã—Ö —à–∞–≥–æ–≤:

    static func task3aa_2() {
        print("–ó–∞–¥–∞—á–∞ 3aa.2: –°–æ–∑–¥–∞–π—Ç–µ –º–∞—Å—Å–∏–≤ –∏–∑ 6 –∑–Ω–∞—á–µ–Ω–∏–π –ª—é–±–æ–≥–æ —Ç–∏–ø–∞. –°–¥–µ–ª–∞–π—Ç–µ –ª–∏–Ω–µ–π–Ω—É—é —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫—É (linear sort).")
        
        var nums = [90, 21, 1, 888, 12, 45]
        print("–ò—Å—Ö–æ–¥–Ω—ã–π –º–∞—Å—Å–∏–≤: \(nums)")
        
        let countNums = nums.count
        
        for i in 0..<countNums - 1 {
            var minIndex = i
            
            for j in i + 1..<countNums {
                if nums[j] < nums[minIndex] {
                    minIndex = j
                }
            }
            
            if minIndex != i {
                nums.swapAt(i, minIndex)
                print("–®–∞–≥ \(i + 1): –ü–æ–º–µ–Ω—è–ª–∏ \(nums[minIndex]) –∏ \(nums[i]) ‚Üí \(nums)")   // –í–æ—Ç –æ—Ç–∫—É–¥–∞ –ø–æ—è–≤–ª—è—é—Ç—Å—è —ç—Ç–∏ –ø—Ä–∏–Ω—Ç—ã!
            }
        }
        
        print("–§–∏–Ω–∞–ª—å–Ω—ã–π –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –º–∞—Å—Å–∏–≤: \(nums)")
    }
    /*  –û—Ç–∫—É–¥–∞ –≤–∑—è–ª–∏—Å—å —ç—Ç–∏ –ø—Ä–∏–Ω—Ç—ã:

     print("–®–∞–≥ \(i + 1): –ü–æ–º–µ–Ω—è–ª–∏ \(oldValueAtI) –∏ \(oldValueAtMinIndex) ‚Üí \(nums)") - —ç—Ç–∞ —Å—Ç—Ä–æ–∫–∞ –≤–Ω—É—Ç—Ä–∏ —É—Å–ª–æ–≤–∏—è if minIndex != i –≤—ã–≤–æ–¥–∏—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–∞–∂–¥–æ–º –æ–±–º–µ–Ω–µ —ç–ª–µ–º–µ–Ω—Ç–æ–≤
     –ö–∞–∫ —ç—Ç–æ —Ä–∞–±–æ—Ç–∞–µ—Ç –Ω–∞ –∫–∞–∂–¥–æ–º —à–∞–≥–µ:
     
     –ò—Å—Ö–æ–¥–Ω—ã–π –º–∞—Å—Å–∏–≤: [90, 21, 1, 888, 12, 45]
     
     –®–∞–≥ 1: –ù–∞—Ö–æ–¥–∏–º –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π —ç–ª–µ–º–µ–Ω—Ç (1) –∏ –º–µ–Ω—è–µ–º –µ–≥–æ —Å –ø–µ—Ä–≤—ã–º —ç–ª–µ–º–µ–Ω—Ç–æ–º (90)
     –®–∞–≥ 2: –í –æ—Å—Ç–∞–≤—à–µ–π—Å—è —á–∞—Å—Ç–∏ –Ω–∞—Ö–æ–¥–∏–º –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π (12) –∏ –º–µ–Ω—è–µ–º —Å–æ –≤—Ç–æ—Ä—ã–º —ç–ª–µ–º–µ–Ω—Ç–æ–º (21)
     –®–∞–≥ 3: –ù–∞—Ö–æ–¥–∏–º –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π (21) –≤ –æ—Å—Ç–∞–≤—à–µ–π—Å—è —á–∞—Å—Ç–∏ –∏ –º–µ–Ω—è–µ–º —Å —Ç—Ä–µ—Ç—å–∏–º —ç–ª–µ–º–µ–Ω—Ç–æ–º (90)
     –®–∞–≥ 4: –ù–∞—Ö–æ–¥–∏–º –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π (45) –∏ –º–µ–Ω—è–µ–º —Å —á–µ—Ç–≤–µ—Ä—Ç—ã–º —ç–ª–µ–º–µ–Ω—Ç–æ–º (888) */
    
    // –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç —Å –¥—Ä—É–≥–∏–º–∏ —Ç–∏–ø–∞–º–∏ –¥–∞–Ω–Ω—ã—Ö:

    static func task3aaa_2() {
        print("–ó–∞–¥–∞—á–∞ 3a.2: –°–æ–∑–¥–∞–π—Ç–µ –º–∞—Å—Å–∏–≤ –∏–∑ 6 –∑–Ω–∞—á–µ–Ω–∏–π –ª—é–±–æ–≥–æ —Ç–∏–ø–∞. –°–¥–µ–ª–∞–π—Ç–µ –ª–∏–Ω–µ–π–Ω—É—é —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫—É")
        
        // –ú–∞—Å—Å–∏–≤ —Å—Ç—Ä–æ–∫
        var strings = ["banana", "apple", "cherry", "limon", "kiwi", "fig"]
        print("–ò—Å—Ö–æ–¥–Ω—ã–π –º–∞—Å—Å–∏–≤ —Å—Ç—Ä–æ–∫: \(strings)") // ü•ù ‚Üí üçé ‚Üí üçà ‚Üí üçå ‚Üí üçã ‚Üí üçí –ò—Å—Ö–æ–¥–Ω—ã–π –º–∞—Å—Å–∏–≤ —Å—Ç—Ä–æ–∫: ["banana", "apple", "cherry", "limon", "kiwi", "fig"]
        
        let count = strings.count
        
        for i in 0..<count - 1 {
            var minIndex = i
            for j in i+1..<count {
                if strings[j] < strings[minIndex] {
                    minIndex = j
                }
            }
            if minIndex != i {
                strings.swapAt(i, minIndex) // –ë–æ–ª–µ–µ Swift-—Å–ø–æ—Å–æ–± –æ–±–º–µ–Ω–∞ —ç–ª–µ–º–µ–Ω—Ç–æ–≤
            }
        }
        
        print("–û—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –º–∞—Å—Å–∏–≤ —Å—Ç—Ä–æ–∫: \(strings)") // –û—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –º–∞—Å—Å–∏–≤ —Å—Ç—Ä–æ–∫: üçéüçåüçíüçàü•ùüçã ["apple", "banana", "cherry", "fig", "kiwi", "limon"]
    }
    
    static func task3a_3() {
        print("–ó–∞–¥–∞—á–∞ 3a.2: –°–æ–∑–¥–∞–π—Ç–µ –º–∞—Å–∏–≤ –∏–∑ 6 –∑–Ω–∞—á–µ–Ω–∏–π –ª—é–±–æ–≥–æ —Ç–∏–ø–∞. –°–¥–µ–ª–∞–π—Ç–µ –ª–∏–Ω–µ–π–Ω—É—é —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫—É (linear sort.")
        
    }
    static func task3a_4() {
        print("–ó–∞–¥–∞—á–∞ 3a.2: –°–æ–∑–¥–∞–π—Ç–µ –º–∞—Å–∏–≤ –∏–∑ 6 –∑–Ω–∞—á–µ–Ω–∏–π –ª—é–±–æ–≥–æ —Ç–∏–ø–∞. –°–¥–µ–ª–∞–π—Ç–µ –ª–∏–Ω–µ–π–Ω—É—é —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫—É (linear sort.")
        
    }
    static func task3a_5() {
        print("–ó–∞–¥–∞—á–∞ 3a.2: –°–æ–∑–¥–∞–π—Ç–µ –º–∞—Å–∏–≤ –∏–∑ 6 –∑–Ω–∞—á–µ–Ω–∏–π –ª—é–±–æ–≥–æ —Ç–∏–ø–∞. –°–¥–µ–ª–∞–π—Ç–µ –ª–∏–Ω–µ–π–Ω—É—é —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫—É (linear sort.")
        
    }
    static func task3a_6() {
        print("–ó–∞–¥–∞—á–∞ 3a.2: –°–æ–∑–¥–∞–π—Ç–µ –º–∞—Å–∏–≤ –∏–∑ 6 –∑–Ω–∞—á–µ–Ω–∏–π –ª—é–±–æ–≥–æ —Ç–∏–ø–∞. –°–¥–µ–ª–∞–π—Ç–µ –ª–∏–Ω–µ–π–Ω—É—é —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫—É (linear sort.")
        
    }
}


