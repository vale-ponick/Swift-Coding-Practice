//
//  Functions-Practice.swift
//  Swift-Coding-Practice
//
//  Created by –í–∞–ª–µ—Ä–∏—è –ü–æ–Ω–æ–º–∞—Ä–µ–≤–∞ on 16.09.2025.
//
import Foundation

public struct Chapter7_Functions {
    public static func runAllTasks() {
        print("=== –ì–ª–∞–≤–∞ 7: –§—É–Ω–∫—Ü–∏–∏ ===")
        task7_1()
        task7_2()
        task7_3()
        task7a_3()
        task7b_3()
        task7—Å_3()
        task7_4()
        task7_5()
    } // –î–æ–±–∞–≤–ª—è–π –Ω–æ–≤—ã–µ –∑–∞–¥–∞—á–∏ —Ç—É—Ç
    
    static func task7_1() {
        print("–ó–∞–¥–∞—á–∞ 7.1: –°–æ–∑–¥–∞–π —Ç—Ä–∏ —Ñ—É–Ω–∫—Ü–∏–∏: 1-–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –º–∞—Å—Å–∏–≤ Int –∏ —Å–æ—Ä—Ç–∏—Ä—É–µ—Ç –µ–≥–æ –ø–æ –ø–æ—Ä—è–¥–∫—É(–≤–æ–∑—Ä–∞—Å—Ç–∞–Ω–∏–µ). –ü–æ—Å–ª–µ - —Ä–∞—Å–ø–µ—á–∞—Ç—ã–≤–∞–µ—Ç –≤ –∫–æ–Ω—Å–æ–ª—å. 2-–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –º–∞—Å—Å–∏–≤ String, –º–µ–Ω—è–µ—Ç 1, 2 –∏ 3 —ç–ª–µ–º–µ–Ω—Ç—ã –∏ —Å–æ—Ä—Ç–∏—Ä—É–µ—Ç –ø–æ –∞–ª—Ñ–∞–≤–∏—Ç—É. –ü–æ—Å–ª–µ - —Ä–∞—Å–ø–µ—á–∞—Ç—ã–≤–∞–µ—Ç –≤ –∫–æ–Ω—Å–æ–ª—å. 3-—è —Ñ—É–Ω–∫—Ü–∏—è –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –¥–≤–∞ –º–∞—Å—Å–∏–≤–∞ —Å—Ç—Ä–æ–∫ –∏ —Å–∫–ª–∞–¥—ã–≤–∞–µ—Ç –∏—Ö. –ü–æ—Å–ª–µ - —Ä–∞—Å–ø–µ—á–∞—Ç—ã–≤–∞–µ—Ç –≤ –∫–æ–Ω—Å–æ–ª—å.")
        
        // var 1 –º–µ–Ω—è–µ–º –∏—Å—Ö–æ–¥–Ω—ã–π –º–∞—Å—Å–∏–≤
        func first(nums: [Int]) {
            let numsSorted = nums.sorted(by: <)
            print(numsSorted)
        }
        first(nums: [1, 4, 2, 7, 3, 8, 1, 9, 2]) // [1, 1, 2, 2, 3, 4, 7, 8, 9]
        
        func second(figures: inout [String]) {
            if figures.count >= 3 {
                (figures[0], figures[1], figures[2]) = (figures[1], figures[2], figures[0]) // –ú–µ–Ω—è–µ–º –º–µ—Å—Ç–∞–º–∏ –ø–µ—Ä–≤—ã–π, –≤—Ç–æ—Ä–æ–π –∏ —Ç—Ä–µ—Ç–∏–π —ç–ª–µ–º–µ–Ω—Ç—ã
                print(figures) //["Queen", "Rook", "King", "Bishop", "Knight", "Rawn"]
                figures.sort()
            }
        }
        var chessPieces = ["King", "Queen", "Rook", "Bishop", "Knight", "Rawn"]
        
        second(figures: &chessPieces)
        print(chessPieces) // ["Bishop", "King", "Knight", "Queen", "Rawn", "Rook"]
        
        // –≤–∞—Ä.2 —Å–æ–∑–¥–∞–µ–º –ù–û–í–´–ô –º–∞—Å—Å–∏–≤
        
        func second(types: [String]) -> [String] {
            
            guard types.count >= 3 else { return types.sorted() }
            var result = types
            (result[0], result[1], result[2]) = (result[1], result[2], result[0])
            return result.sorted()
        }
        
        let weatherPieces = ["Sunnny", "Cloudly", "Rainy", "Snowy", "Windy", "Foggy", "Stormy", "Mist", "Over all Spain the sky is clouless"]
        let res = second(types: weatherPieces)
        print(res) // –û–¢–°–û–†–¢–ò–†–û–í–ê–ù–ù–´–ô –º–∞—Å—Å–∏–≤ –ü–û–°–õ–ï –∑–∞–º–µ–Ω—ã –ø–µ—Ä–≤—ã—Ö 3-—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤: ["Cloudly", "Foggy", "Mist", "Over all Spain the sky is clouless", "Rainy", "Snowy", "Stormy", "Sunnny", "Windy"]
        print(weatherPieces) // –ò–°–•–û–î–ù–´–ô –ù–ï–∏–∑–º–µ–Ω–Ω—ã–π –º–∞—Å—Å–∏–≤: ["Sunnny", "Cloudly", "Rainy", "Snowy", "Windy", "Foggy", "Stormy", "Mist", "Over all Spain the sky is clouless"]
        /* –ö–ª—é—á–µ–≤—ã–µ —Ä–∞–∑–ª–∏—á–∏—è:
         
         Inout (—à–∞—Ö–º–∞—Ç—ã)    –í–æ–∑–≤—Ä–∞—Ç –º–∞—Å—Å–∏–≤–∞ (–ø–æ–≥–æ–¥–∞)
         –ò–∑–º–µ–Ω—è–µ—Ç –∏—Å—Ö–æ–¥–Ω—ã–π?    ‚úÖ –î–∞    ‚ùå –ù–µ—Ç
         –ó–∞—â–∏—Ç–∞ guard?    ‚ùå –ù–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ    ‚úÖ –û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ
         –ü—É—Å—Ç–æ–π –º–∞—Å—Å–∏–≤?    –ù–∏—á–µ–≥–æ –Ω–µ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø—É—Å—Ç–æ–π –º–∞—Å—Å–∏–≤
         –ö–æ–≥–¥–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å?    –ö–æ–≥–¥–∞ –Ω—É–∂–Ω–æ –∏–∑–º–µ–Ω–∏—Ç—å –∏—Å—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ    –ö–æ–≥–¥–∞ –∏—Å—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–æ–ª–∂–Ω—ã –æ—Å—Ç–∞—Ç—å—Å—è –Ω–µ–∏–∑–º–µ–Ω–Ω—ã–º–∏
         –ü–æ—á–µ–º—É –≤ –ø–æ–≥–æ–¥–Ω–æ–º –≤–∞—Ä–∏–∞–Ω—Ç–µ guard –≤–∞–∂–Ω–µ–µ:
         
         –§—É–Ω–∫—Ü–∏—è –¥–æ–ª–∂–Ω–∞ –≤–µ—Ä–Ω—É—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ –ª—é–±–æ–º —Å–ª—É—á–∞–µ
         –ï—Å–ª–∏ –º–∞—Å—Å–∏–≤ –ø—É—Å—Ç–æ–π/–∫–æ—Ä–æ—Ç–∫–∏–π - –Ω—É–∂–Ω–æ –≤–µ—Ä–Ω—É—Ç—å —á—Ç–æ-—Ç–æ –æ—Å–º—ã—Å–ª–µ–Ω–Ω–æ–µ
         guard –≥–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ—Ç, —á—Ç–æ –º—ã –æ–±—Ä–∞–±–æ—Ç–∞–µ–º –≤—Å–µ –≤–æ–∑–º–æ–∂–Ω—ã–µ —Å–ª—É—á–∞–∏
         –¢—ã –∞–±—Å–æ–ª—é—Ç–Ω–æ –ø—Ä–∞–≤–∞! üëè –û—Ç–ª–∏—á–Ω–æ–µ –Ω–∞–±–ª—é–¥–µ–Ω–∏–µ!
         feat: –¥–æ–±–∞–≤–ª–µ–Ω—ã –¥–≤–µ –≤–µ—Ä—Å–∏–∏ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –º–∞—Å—Å–∏–≤–∞–º–∏
         
         - Inout –≤–µ—Ä—Å–∏—è: –∏–∑–º–µ–Ω—è–µ—Ç –∏—Å—Ö–æ–¥–Ω—ã–π –º–∞—Å—Å–∏–≤ (–ø–æ–¥—Ö–æ–¥ –º—É—Ç–∞—Ü–∏–∏)
         - Guard –≤–µ—Ä—Å–∏—è: –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –Ω–æ–≤—ã–π –º–∞—Å—Å–∏–≤ (—Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π –ø–æ–¥—Ö–æ–¥)
         - –û–±–µ —Ñ—É–Ω–∫—Ü–∏–∏ –≤—ã–ø–æ–ª–Ω—è—é—Ç –∑–∞–º–µ–Ω—É —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –∏ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫—É
         - –î–æ–±–∞–≤–ª–µ–Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∞ edge cases —á–µ—Ä–µ–∑ guard */
        
        // var. 1 - –ë—ã—Å—Ç—Ä–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ (–ø—Ä–æ—Ü–µ–¥—É—Ä–Ω—ã–π —Å—Ç–∏–ª—å)
        func combineAndSortedArrays(weather: [String], chessPieces: [String]) {
            let unitedArray = (weather + chessPieces).sorted()
            print("–≠—Ç–æ –æ–±—ä–µ–¥–∏–Ω–µ–Ω–Ω—ã–π –∏ –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ù–û–í–´–ô –º–∞—Å—Å–∏–≤ - \(unitedArray)")
        }
        combineAndSortedArrays(weather: ["Cloudy", "Foggy", "Mist", "Over all Spain the sky is cloudless", "Rainy", "Snowy", "Stormy", "Sunny", "Windy"], chessPieces: ["Bishop", "King", "Knight", "Queen", "Pawn", "Rook"]) // –≠—Ç–æ –æ–±—ä–µ–¥–∏–Ω–µ–Ω–Ω—ã–π –∏ –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ù–û–í–´–ô –º–∞—Å—Å–∏–≤ - ["Bishop", "Cloudy", "Foggy", "King", "Knight", "Mist", "Over all Spain the sky is cloudless", "Queen", "Rainy", "Pawn", "Rook", "Snowy", "Stormy", "Sunny", "Windy"]
        
        // var. 2 - –ë–æ–ª–µ–µ –≥–∏–±–∫–∞—è –≤–µ—Ä—Å–∏—è (–≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç)
        func combineSortedArrays(weather: [String], chessPieces: [String]) -> [String] {
            return (weather + chessPieces).sorted()
        }
        let result = combineSortedArrays(weather: ["Cloudy", "Foggy", "Mist", "Over all Spain the sky is cloudless", "Rainy", "Snowy", "Stormy", "Sunny", "Windy"], chessPieces: ["Bishop", "King", "Knight", "Queen", "Pawn", "Rook"]) // –≠—Ç–æ –æ–±—ä–µ–¥–∏–Ω–µ–Ω–Ω—ã–π –∏ –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ù–û–í–´–ô –º–∞—Å—Å–∏–≤ - ["Bishop", "Cloudy", "Foggy", "King", "Knight", "Mist", "Over all Spain the sky is cloudless", "Queen", "Rainy", "Pawn", "Rook", "Snowy", "Stormy", "Sunny", "Windy"]
        print("–≠—Ç–æ –æ–±—ä–µ–¥–∏–Ω–µ–Ω–Ω—ã–π –∏ –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ù–û–í–´–ô –º–∞—Å—Å–∏–≤ - \(result)") // –≠—Ç–æ –æ–±—ä–µ–¥–∏–Ω–µ–Ω–Ω—ã–π –∏ –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ù–û–í–´–ô –º–∞—Å—Å–∏–≤ - ["Bishop", "Cloudy", "Foggy", "King", "Knight", "Mist", "Over all Spain the sky is cloudless", "Pawn", "Queen", "Rainy", "Rook", "Snowy", "Stormy", "Sunny", "Windy"]
        
        // var. 3 - –°–∞–º—ã–π —á–∏—Å—Ç—ã–π –∏ —á–∏—Ç–∞–µ–º—ã–π –∫–æ–¥! ‚ú®
        func combiAndSortArrays(weather: [String], chess: [String]) -> [String] {
            return (weather + chess).sorted()
        }
        
        let weather = ["Cloudy", "Foggy", "Mist", "Over all Spain the sky is cloudless", "Rainy", "Snowy", "Stormy", "Sunny", "Windy"]
        let chess = ["Bishop", "King", "Knight", "Queen", "Pawn", "Rook"]
        
        let total = combiAndSortArrays(weather: weather, chess: chess)
        print("–û–±—ä–µ–¥–∏–Ω–µ–Ω–Ω—ã–π –∏ –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –º–∞—Å—Å–∏–≤: \(total)") // –û–±—ä–µ–¥–∏–Ω–µ–Ω–Ω—ã–π –∏ –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –º–∞—Å—Å–∏–≤: ["Bishop", "Cloudy", "Foggy", "King", "Knight", "Mist", "Over all Spain the sky is cloudless", "Pawn", "Queen", "Rainy", "Rook", "Snowy", "Stormy", "Sunny", "Windy"]
    }
    
    static func task7_2() {
        print("–ó–∞–¥–∞—á–∞ 7.2: –°–æ–∑–¥–∞–π –∂—É—Ä–Ω–∞–ª –¥–ª—è —É—á–∏—Ç–µ–ª—è, –∫–æ—Ç–æ—Ä—ã–π –±—É–¥–µ—Ç –ø—Ä–∏–Ω–∏–º–∞—Ç—å –∏–º—è —Å—Ç—É–¥–µ–Ω—Ç–∞, –ø—Ä–æ—Ñ–µ—Å—Å–∏—é, –æ—Ü–µ–Ω–∫—É –∏ –∑–∞–ø–∏—Å—ã–≤–∞—Ç—å –≤—Å–µ —ç—Ç–æ –≤ –º–∞—Å—Å–∏–≤. –í–Ω–µ—Å–∏ 10 —Å—Ç—É–¥–µ–Ω—Ç–æ–≤ –∏ —Ä–∞—Å–ø–µ—á–∞—Ç–∞–π —á–µ—Ä–µ–∑ —Ü–∏–∫–ª 'for'.")
        
        struct Student {
            let name: String
            let profession: String
            let grade: Int
            
            func isExcellent() -> Bool {
                return grade >= 90
            }
        }
        
        // –§—É–Ω–∫—Ü–∏—è 1: –ü–µ—á–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å—Ç—É–¥–µ–Ω—Ç–∞—Ö
        func printStudents(_ students: [Student]) {
            for student in students {
                print("–°—Ç—É–¥–µ–Ω—Ç \(student.name), –ø—Ä–æ—Ñ–µ—Å—Å–∏—è \(student.profession), –æ—Ü–µ–Ω–∫–∞ \(student.grade)")
            }
        }
        
        // –§—É–Ω–∫—Ü–∏—è 2: –ê–Ω–∞–ª–∏–∑ —É—Å–ø–µ–≤–∞–µ–º–æ—Å—Ç–∏
        func analyzePerformance(_ students: [Student]) {
            let excellentStudents = students.filter { $0.isExcellent() }
            let averageGrade = students.map { $0.grade }.reduce(0, +) / students.count
            
            print("=== –ê–ù–ê–õ–ò–ó –£–°–ü–ï–í–ê–ï–ú–û–°–¢–ò ===")
            print("–û—Ç–ª–∏—á–Ω–∏–∫–∏ (\(excellentStudents.count) —á–µ–ª–æ–≤–µ–∫):")
            for student in excellentStudents {
                print("‚≠êÔ∏è \(student.name) - \(student.grade) –±–∞–ª–ª–æ–≤")
            }
            print("–°—Ä–µ–¥–Ω–∏–π –±–∞–ª–ª –≥—Ä—É–ø–ø—ã: \(averageGrade)")
        }
        
        // –§—É–Ω–∫—Ü–∏—è 3: –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è, –∫–æ—Ç–æ—Ä–∞—è –æ–±—ä–µ–¥–∏–Ω—è–µ—Ç –æ—Å—Ç–∞–ª—å–Ω—ã–µ
        func executeTask() {
            let students = [
                Student(name: "Ann", profession: "IT", grade: 91),
                Student(name: "Bob", profession: "IT", grade: 75),
                Student(name: "Sam", profession: "IT", grade: 99),
                Student(name: "Alice", profession: "Design", grade: 88),
                Student(name: "John", profession: "Marketing", grade: 82),
                Student(name: "Emma", profession: "IT", grade: 95),
                Student(name: "Mike", profession: "Finance", grade: 79),
                Student(name: "Lisa", profession: "Design", grade: 90),
                Student(name: "Tom", profession: "Marketing", grade: 85),
                Student(name: "Sarah", profession: "IT", grade: 92)
            ]
            
            printStudents(students)    // –û–¥–Ω–æ –¥–µ–π—Å—Ç–≤–∏–µ
            analyzePerformance(students) // –î—Ä—É–≥–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ
        }
        executeTask()
        
        /* –ó–∞–¥–∞—á–∞ 7.2: –°–æ–∑–¥–∞–π –∂—É—Ä–Ω–∞–ª –¥–ª—è —É—á–∏—Ç–µ–ª—è, –∫–æ—Ç–æ—Ä—ã–π –±—É–¥–µ—Ç –ø—Ä–∏–Ω–∏–º–∞—Ç—å –∏–º—è —Å—Ç—É–¥–µ–Ω—Ç–∞, –ø—Ä–æ—Ñ–µ—Å—Å–∏—é, –æ—Ü–µ–Ω–∫—É –∏ –∑–∞–ø–∏—Å—ã–≤–∞—Ç—å –≤—Å–µ —ç—Ç–æ –≤ –º–∞—Å—Å–∏–≤. –í–Ω–µ—Å–∏ 10 —Å—Ç—É–¥–µ–Ω—Ç–æ–≤ –∏ —Ä–∞—Å–ø–µ—á–∞—Ç–∞–π —á–µ—Ä–µ–∑ —Ü–∏–∫–ª 'for'.
         –°—Ç—É–¥–µ–Ω—Ç Ann, –ø—Ä–æ—Ñ–µ—Å—Å–∏—è IT, –æ—Ü–µ–Ω–∫–∞ 91
         –°—Ç—É–¥–µ–Ω—Ç Bob, –ø—Ä–æ—Ñ–µ—Å—Å–∏—è IT, –æ—Ü–µ–Ω–∫–∞ 75
         –°—Ç—É–¥–µ–Ω—Ç Sam, –ø—Ä–æ—Ñ–µ—Å—Å–∏—è IT, –æ—Ü–µ–Ω–∫–∞ 99
         –°—Ç—É–¥–µ–Ω—Ç Alice, –ø—Ä–æ—Ñ–µ—Å—Å–∏—è Design, –æ—Ü–µ–Ω–∫–∞ 88
         –°—Ç—É–¥–µ–Ω—Ç John, –ø—Ä–æ—Ñ–µ—Å—Å–∏—è Marketing, –æ—Ü–µ–Ω–∫–∞ 82
         –°—Ç—É–¥–µ–Ω—Ç Emma, –ø—Ä–æ—Ñ–µ—Å—Å–∏—è IT, –æ—Ü–µ–Ω–∫–∞ 95
         –°—Ç—É–¥–µ–Ω—Ç Mike, –ø—Ä–æ—Ñ–µ—Å—Å–∏—è Finance, –æ—Ü–µ–Ω–∫–∞ 79
         –°—Ç—É–¥–µ–Ω—Ç Lisa, –ø—Ä–æ—Ñ–µ—Å—Å–∏—è Design, –æ—Ü–µ–Ω–∫–∞ 90
         –°—Ç—É–¥–µ–Ω—Ç Tom, –ø—Ä–æ—Ñ–µ—Å—Å–∏—è Marketing, –æ—Ü–µ–Ω–∫–∞ 85
         –°—Ç—É–¥–µ–Ω—Ç Sarah, –ø—Ä–æ—Ñ–µ—Å—Å–∏—è IT, –æ—Ü–µ–Ω–∫–∞ 92
         === –ê–ù–ê–õ–ò–ó –£–°–ü–ï–í–ê–ï–ú–û–°–¢–ò ===
         –û—Ç–ª–∏—á–Ω–∏–∫–∏ (5 —á–µ–ª–æ–≤–µ–∫):
         ‚≠êÔ∏è Ann - 91 –±–∞–ª–ª–æ–≤
         ‚≠êÔ∏è Sam - 99 –±–∞–ª–ª–æ–≤
         ‚≠êÔ∏è Emma - 95 –±–∞–ª–ª–æ–≤
         ‚≠êÔ∏è Lisa - 90 –±–∞–ª–ª–æ–≤
         ‚≠êÔ∏è Sarah - 92 –±–∞–ª–ª–æ–≤ */
        
        // var. 2 –ë–ï–ó –ª–∏—à–Ω–µ–π –≤–ª–æ–∂–µ–Ω–Ω–æ—Å—Ç–∏
        
        struct Schoolchild {
            let name: String
            let classSpecialization: String
            let grade: Int
            
            func isExcellent() -> Bool {
                return grade == 5
            }
        }
        
        func printSchoolchildren(_ schoolchildren: [Schoolchild]) {
            for schoolchild in schoolchildren {
                print("–£—á–µ–Ω–∏–∫ \(schoolchild.name), –∫–ª–∞—Å—Å \(schoolchild.classSpecialization), –æ—Ü–µ–Ω–∫–∞ \(schoolchild.grade)")
            }
        }
        
        func analyzePerformance(_ schoolchildren: [Schoolchild]) {
            let excellentChildren = schoolchildren.filter { $0.isExcellent() }
            _ = schoolchildren.map { $0.grade }.reduce(0, +) / schoolchildren.count
            
            print("=== –ê–ù–ê–õ–ò–ó –£–°–ü–ï–í–ê–ï–ú–û–°–¢–ò ===")
            print("–û—Ç–ª–∏—á–Ω–∏–∫–∏ (\( excellentChildren.count) —á–µ–ª–æ–≤–µ–∫):")
            
            for child in excellentChildren {
                print("‚≠êÔ∏è \(child.name) - \(child.grade) –±–∞–ª–ª–æ–≤")
            }
        }
        
        // ‚úÖ –ü–†–û–°–¢–û –í–´–ü–û–õ–ù–Ø–ï–ú –ö–û–î –ü–†–Ø–ú–û –ó–î–ï–°–¨:
        let schoolchildren = [
            Schoolchild(name: "–ò–≤–∞–Ω", classSpecialization: "A", grade: 3),
            Schoolchild(name: "–°—Ç–µ–ø–∞–Ω", classSpecialization: "B", grade: 3),
            Schoolchild(name: "–ö–æ—Å—Ç—è", classSpecialization: "A", grade: 4),
            Schoolchild(name: "A–Ω–¥—Ä–µ–π", classSpecialization: "–°", grade: 3),
            Schoolchild(name: "–§–µ–¥–æ—Ä", classSpecialization: "–°", grade: 4),
            Schoolchild(name: "–ñ–µ–Ω—è", classSpecialization: "B", grade: 5),
            Schoolchild(name: "–ö–∏—Ä–∏–ª–ª", classSpecialization: "A", grade: 4),
            Schoolchild(name: "–í–∏—Ç—è", classSpecialization: "–°", grade: 5),
        ]
        let averageGrade = Double(schoolchildren.map { $0.grade }.reduce(0, +)) / Double(schoolchildren.count)
        
        printSchoolchildren(schoolchildren)
        analyzePerformance(schoolchildren)
        print("–°—Ä–µ–¥–Ω–∏–π –±–∞–ª–ª –∫–ª–∞—Å—Å–∞: \(String(format: "%.1f", averageGrade))")
    }
    /*  –£—á–µ–Ω–∏–∫ –ò–≤–∞–Ω, –∫–ª–∞—Å—Å A, –æ—Ü–µ–Ω–∫–∞ 3
     –£—á–µ–Ω–∏–∫ –°—Ç–µ–ø–∞–Ω, –∫–ª–∞—Å—Å B, –æ—Ü–µ–Ω–∫–∞ 3
     –£—á–µ–Ω–∏–∫ –ö–æ—Å—Ç—è, –∫–ª–∞—Å—Å A, –æ—Ü–µ–Ω–∫–∞ 4
     –£—á–µ–Ω–∏–∫ A–Ω–¥—Ä–µ–π, –∫–ª–∞—Å—Å –°, –æ—Ü–µ–Ω–∫–∞ 3
     –£—á–µ–Ω–∏–∫ –§–µ–¥–æ—Ä, –∫–ª–∞—Å—Å –°, –æ—Ü–µ–Ω–∫–∞ 4
     –£—á–µ–Ω–∏–∫ –ñ–µ–Ω—è, –∫–ª–∞—Å—Å B, –æ—Ü–µ–Ω–∫–∞ 5
     –£—á–µ–Ω–∏–∫ –ö–∏—Ä–∏–ª–ª, –∫–ª–∞—Å—Å A, –æ—Ü–µ–Ω–∫–∞ 4
     –£—á–µ–Ω–∏–∫ –í–∏—Ç—è, –∫–ª–∞—Å—Å –°, –æ—Ü–µ–Ω–∫–∞ 5
     === –ê–ù–ê–õ–ò–ó –£–°–ü–ï–í–ê–ï–ú–û–°–¢–ò ===
     –û—Ç–ª–∏—á–Ω–∏–∫–∏ (2 —á–µ–ª–æ–≤–µ–∫):
     ‚≠êÔ∏è –ñ–µ–Ω—è - 5 –±–∞–ª–ª–æ–≤
     ‚≠êÔ∏è –í–∏—Ç—è - 5 –±–∞–ª–ª–æ–≤
     –°—Ä–µ–¥–Ω–∏–π –±–∞–ª–ª –∫–ª–∞—Å—Å–∞: 3.9   */
    
    static func task7_3() {
        print("–ó–∞–¥–∞—á–∞ 7.1: –°–æ–∑–¥–∞–π —Ñ—É–Ω–∫—Ü–∏—é, –∫–æ—Ç–æ—Ä–∞—è –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –∏–º—è –∏ —Ñ–∞–º–∏–ª–∏—é, –ø–æ—Ç–æ–º –ø–æ–ª–æ–∂–∏—Ç—å –≤—Å–µ —ç—Ç–æ –≤ –ú–ê–°–°–ò–í –∏ –≤—ã–≤–µ—Å—Ç–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ –∫–æ–Ω—Å–æ–ª—å.")
        
        // –≤–∞—Ä. 1 –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ú–ê–°–°–ò–í
        struct Person {
            let name: String
            let surname: String
            let age: String
        }
        
        func add(name: String, surname: String, age: String) -> [String] {
            return [name, surname, age]
        }
        let humanInfo = add(name: "Joe", surname: "Smith", age: "41")
        print(humanInfo) // ["Joe", "Smith", "41"]
    }
    
    static func task7a_3() {
        print("–ó–∞–¥–∞—á–∞ 7.1: –°–æ–∑–¥–∞–π —Ñ—É–Ω–∫—Ü–∏—é, –∫–æ—Ç–æ—Ä–∞—è –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –∏–º—è –∏ —Ñ–∞–º–∏–ª–∏—é, –ø–æ—Ç–æ–º –ø–æ–ª–æ–∂–∏—Ç—å –≤—Å–µ —ç—Ç–æ –≤ –ú–ê–°–°–ò–í –∏ –≤—ã–≤–µ—Å—Ç–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ –∫–æ–Ω—Å–æ–ª—å.")
        
        // –≤–∞—Ä. 2 —ç—Ç–æ –ú–ê–°–°–ò–í –°–¢–†–£–ö–¢–£–†
        
        struct Beatle {
            let name: String
            let instrument: String
            let role: String
            let birthYear: Int
            let signatureSong: String
        }
        
        func getAllBeatles() -> [Beatle] {
            return [
                Beatle(name: "John Lennon", instrument: "guitar", role: "singer", birthYear: 1940, signatureSong: "Imagine"),
                Beatle(name: "Paul McCartney", instrument: "bass", role: "singer", birthYear: 1942, signatureSong: "Yesterday"),
                Beatle(name: "George Harrison", instrument: "guitar", role: "lead guitar", birthYear: 1943, signatureSong: "Here Comes the Sun"),
                Beatle(name: "Ringo Starr", instrument: "drums", role: "drummer", birthYear: 1940, signatureSong: "With a Little Help from My Friends")
            ]
        }
        
        let beatles = getAllBeatles()
        
        beatles.forEach { beatle in
            print("üéµ \(beatle.name)")
            print("   Instrument: \(beatle.instrument)")
            print("   Signature Song: \(beatle.signatureSong)")
            print("   BirthYear: \(beatle.birthYear)")
            print("---")
        }
    } /* üéµ John Lennon
       Instrument: guitar
       Signature Song: Imagine
       BirthYear: 1940
       ---
       üéµ Paul McCartney
       Instrument: bass
       Signature Song: Yesterday
       BirthYear: 1942
       ---
       üéµ George Harrison
       Instrument: guitar
       Signature Song: Here Comes the Sun
       BirthYear: 1943
       ---
       üéµ Ringo Starr
       Instrument: drums
       Signature Song: With a Little Help from My Friends
       BirthYear: 1940  */
    
    
    static func task7b_3() {
        print("–ó–∞–¥–∞—á–∞ 7.1: –°–æ–∑–¥–∞–π —Ñ—É–Ω–∫—Ü–∏—é, –∫–æ—Ç–æ—Ä–∞—è –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –∏–º—è –∏ —Ñ–∞–º–∏–ª–∏—é, –ø–æ—Ç–æ–º –ø–æ–ª–æ–∂–∏—Ç—å –≤—Å–µ —ç—Ç–æ –≤ –ú–ê–°–°–ò–í –∏ –≤—ã–≤–µ—Å—Ç–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ –∫–æ–Ω—Å–æ–ª—å.")
        // var. 3 - —ç—Ç–æ –ú–ê–°–°–ò–í –°–õ–û–í–ê–†–ï–ô
        
        func getABBA() -> [[String: Any]] {
            return [
                [
                    "name": "Agnetha F√§ltskog",
                    "instrument": "vocals",
                    "role": "soprano",
                    "birthYear": 1950,
                    "signatureSong": "Dancing Queen"
                ],
                [
                    "name": "Bj√∂rn Ulvaeus",
                    "instrument": "guitar",
                    "role": "composer",
                    "birthYear": 1945,
                    "signatureSong": "Mamma Mia"
                ],
                [
                    "name": "Benny Andersson",
                    "instrument": "keyboard",
                    "role": "composer",
                    "birthYear": 1946,
                    "signatureSong": "Waterloo"
                ],
                [
                    "name": "Anni-Frid Lyngstad",
                    "instrument": "vocals",
                    "role": "alto",
                    "birthYear": 1945,
                    "signatureSong": "The Winner Takes It All"
                ]
            ]
        }
        
        func printABBA() {
            getABBA().forEach { member in
                print("üé§ \(member["name"] ?? "Unknown")")
                print("   Instrument: \(member["instrument"] ?? "Unknown")")
                print("   Signature Song: \(member["signatureSong"] ?? "Unknown")")
                print("---")
            }
        }
        printABBA()
    } /*  üé§ Agnetha F√§ltskog
       Instrument: vocals
       Signature Song: Dancing Queen
       ---
       üé§ Bj√∂rn Ulvaeus
       Instrument: guitar
       Signature Song: Mamma Mia
       ---
       üé§ Benny Andersson
       Instrument: keyboard
       Signature Song: Waterloo
       ---
       üé§ Anni-Frid Lyngstad
       Instrument: vocals
       Signature Song: The Winner Takes It All
       --- */
    
    static func task7—Å_3() {
        print("\n=== –í–∞—Ä–∏–∞–Ω—Ç 1: –ú–∞—Å—Å–∏–≤ –º–∞—Å—Å–∏–≤–æ–≤ (Queen) ===")
        
        func getQueen() -> [[String]] {
            return [
                ["Freddie Mercury", "vocals", "singer", "1946", "Bohemian Rhapsody"],
                ["Brian May", "guitar", "lead guitar", "1947", "We Will Rock You"],
                ["John Deacon", "bass", "bassist", "1951", "Another One Bites the Dust"],
                ["Roger Taylor", "drums", "drummer", "1949", "Radio Ga Ga"]
            ]
        }
        
        let queen = getQueen()
        
        queen.forEach { member in
            print("üé∏ \(member[0])")          // –∏–º—è
            print("   Instrument: \(member[1])") // –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç
            print("   Role: \(member[2])")      // —Ä–æ–ª—å
            print("   Birth Year: \(member[3])") // –≥–æ–¥ —Ä–æ–∂–¥–µ–Ω–∏—è
            print("   Hit Song: \(member[4])")   // –ø–µ—Å–Ω—è
            print("---")
        }
    } /* === –í–∞—Ä–∏–∞–Ω—Ç 1: –ú–∞—Å—Å–∏–≤ –º–∞—Å—Å–∏–≤–æ–≤ (Queen) ===
       üé∏ Freddie Mercury
          Instrument: vocals
          Role: singer
          Birth Year: 1946
          Hit Song: Bohemian Rhapsody
       ---
       üé∏ Brian May
          Instrument: guitar
          Role: lead guitar
          Birth Year: 1947
          Hit Song: We Will Rock You
       ---
       üé∏ John Deacon
          Instrument: bass
          Role: bassist
          Birth Year: 1951
          Hit Song: Another One Bites the Dust
       ---
       üé∏ Roger Taylor
          Instrument: drums
          Role: drummer
          Birth Year: 1949
          Hit Song: Radio Ga Ga
       --- */
    
    static func task7_4() {
        print("–ó–∞–¥–∞—á–∞ 7.1: –°–æ–∑–¥–∞–π —Ñ—É–Ω–∫—Ü–∏—é, –∫–æ—Ç–æ—Ä–∞—è –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∏ –≤—ã—á–∏—Å–ª—è–µ—Ç –ø–ª–æ—â–∞–¥—å –∫—Ä—É–≥–∞.")
    }
    static func task7_5() {
        print("–ó–∞–¥–∞—á–∞ 7.1: –°–æ–∑–¥–∞–π —Å–ª–æ–≤–∞—Ä—å —Å –∏–º–µ–Ω–∞–º–∏ —É—á–µ–Ω–∏–∫–æ–≤, –≥–¥–µ –∫–ª—é—á - name, –∞ –∑–Ω–∞—á–µ–Ω–∏–µ - (1 tuple –∏–∑ 5 –∏–º–µ–Ω) –∏ (2 –∫–æ—Ä—Ç–µ–∂ –∏–∑ 5 –æ—Ü–µ–Ω–æ–∫). –†–∞—Å–ø–µ—á–∞—Ç–∞–π —Ç–æ–ª—å–∫–æ –∏–º–µ–Ω–∞ –ø–æ –∫–ª—é—á—É.")
    }
}

