//
//  Arrays.swift
//  Swift-Coding-Practice
//
//  Created by –í–∞–ª–µ—Ä–∏—è –ü–æ–Ω–æ–º–∞—Ä–µ–≤–∞ on 07.09.2025.

import Foundation

public struct Chapter3_Arrays {
    public static func runAllTasks() {
        print("=== –ì–ª–∞–≤–∞ 3: –ú–∞—Å—Å–∏–≤—ã ===")
        task3_1()
        task3_2()
        task3_3()
        task3_4()
        task3_5()
        task3_6()
        // Arrays: Advanced Level
        task3a_1()
        task3ab_1()
        task3ac_1()
        task3a_2()
        task3ab_2()
        task3ac_2()
        task3ad_2()
        task3ae_2()
        task3a_2_swiftStyle()
        task3a_2_functional()
        task3a_2_perfect()
        task3a_2_compact()
        task3a_3()
        task3a_4()
        task3a_5()
        task3a_6()
        task3a_7()
        task3ab_7()
        task3a—Å_7()
        task3ad_7()
        task3ae_7()
        task3af_7()
        
        // –î–æ–±–∞–≤–ª—è–π—Ç–µ –Ω–æ–≤—ã–µ –∑–∞–¥–∞—á–∏ —Ç—É—Ç
    }
    
    static func task3_1() {
        print("–ó–∞–¥–∞—á–∞ 3.1: ..")
    }
    
    static func task3_2() {
        print("–ó–∞–¥–∞—á–∞ 3.2:...")
        let original = "Hello"
        let reversed = String(original.reversed())
        print("–û—Ä–∏–≥–∏–Ω–∞–ª: \(original), –†–µ–≤–µ—Ä—Å: \(reversed)")
    }
    
    static func task3_3() {
        print("–ó–∞–¥–∞—á–∞ 3.3: ..")
    }
    static func task3_4() {
        print("–ó–∞–¥–∞—á–∞ 3.4: ..")
    }
    static func task3_5() {
        print("–ó–∞–¥–∞—á–∞ 3.5: –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–∞–ª–∏–Ω–¥—Ä–æ–º–∞")
    }
    
    static func task3_6() {
        print("–ó–∞–¥–∞—á–∞ 3.6: –°–æ–∑–¥–∞–π—Ç–µ –º–∞—Å—Å–∏–≤ –∏–∑ —á–∏—Å–µ–ª = –∫—É–ø—é—Ä –≤ –¥–æ–ª–ª–∞—Ä–∞—Ö. –ü–æ—Å—á–∏—Ç–∞–π –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–µ–Ω–µ–≥ –∏ –≤—ã–≤–µ–¥–∏ –≤ –∫–æ–Ω—Å–æ–ª—å.")
        
        // Option 1: Loop
        let dollars = [100, 50, 2, 5, 5, 20, 10, 20, 50, 100, 1] // –∫—É–ø—é—Ä—ã
        var summaViaLoop: Int = 0
        for dollar in dollars {
            summaViaLoop += dollar
        }
        print("Cash in wallet from circle: \(summaViaLoop)") // Cash in wallet from circle: 363
        
        // Option 1: Reduce
        let summaViaReduce = dollars.reduce(0, +)
        print("Cash in wallet from 'reduce': \(summaViaReduce)") // Cash in wallet from 'reduce': 363
        
        // Verification
        print("Do the results match? \(summaViaReduce == summaViaLoop)") // Do the results match? true
    }
    
    // Arrays: Advanced Level
    
    static func task3a_1() {
        print("–ó–∞–¥–∞—á–∞ 3a.1: –°–æ–∑–¥–∞–π 10 —Å—Ç—Ä–æ–∫ —Å –Ω–∞–∑–≤–∞–Ω–∏—è–º–∏ —Å—Ç—Ä–∞–Ω. –°–æ–∑–¥–∞–π –º–∞—Å—Å–∏–≤.")
        // Option 1:
        let france = "France"
        let italy = "Italy"
        let germany = "Germany"
        let czechRepublic = "Czech Republic"
        let denmark = "Denmark"
        let croatia = "Croatia"
        let ireland = "Ireland"
        let austria = "Austria"
        let sweden = "Sweden"
        let poland = "Poland"
        
        var euCountries: [String] = []
        
        euCountries.append(france)
        euCountries.append(contentsOf: [italy, germany, czechRepublic])
        euCountries.append(contentsOf: [denmark, croatia, ireland, austria, sweden, poland])
        
        print(euCountries) // ["France", "Italy", "Germany", "Czech Republic", "Denmark", "Croatia", "Ireland", "Austria", "Sweden", "Poland"]
        
        // Option 2:
        let europeanUnion = [
            "France",
            "Italy",
            "Germany",
            "Czech Republic",
            "Denmark",
            "Croatia",
            "Ireland",
            "Austria",
            "Sweden",
            "Poland"
        ]
        print(europeanUnion) // ["France", "Italy", "Germany", "Czech Republic", "Denmark", "Croatia", "Ireland", "Austria", "Sweden", "Poland"]
    }
    
    static func task3ab_1() {
        print("–ó–∞–¥–∞—á–∞ 3a.1: –ü—Ä–æ–≤–µ—Ä—å —Å—Ç—Ä–æ–∫–∏, –µ—Å–ª–∏ –≤ —Å—Ç—Ä–æ–∫–µ > 5 —Å–∏–º–≤–æ–ª–æ–≤ - –¥–æ–±–∞–≤—å –µ–µ –≤ –º–∞—Å—Å–∏–≤. –ù–æ –µ—Å–ª–∏ —Å—Ç—Ä–æ–∫–∞ —Å–æ–¥–µ—Ä–∂–∏—Ç –±—É–∫–≤—É –ê, –∑–∞–º–µ–Ω–∏ —ç—Ç—É –±—É–∫–≤—É –Ω–∞ –¥—Ä—É–≥—É—é –∏ –¥–æ–±–∞–≤—å –∏–∑–º–µ–Ω–µ–Ω–Ω—É—é —Å—Ç—Ä–æ–∫—É —Å –º–∞—Å—Å–∏–≤.")
        
        var resultArray: [String] = []
        
        // option 1: Loop with replacement logic
        
        let europeanUnion = [
            "France",
            "Italy",
            "Germany",
            "Czech Republic",
            "Denmark",
            "Croatia",
            "Ireland",
            "Austria",
            "Sweden",
            "Poland"
        ]
        for country in europeanUnion {
            if country.count > 6 {
                if country.contains("A") || country.contains("a") {
                    let modifiedCountry = country.replacingOccurrences(of: "a", with: "Y", options: .caseInsensitive)
                    resultArray.append(modifiedCountry)
                } else {
                    resultArray.append(country)
                }
            }
        }
        print("Option 1 result: \(resultArray)") // Option 1 result: ["GermYny", "Czech Republic", "DenmYrk", "CroYtiY", "IrelYnd", "YustriY"]
        
        // Option 2: Functional style
        
        let resArray = europeanUnion.filter { $0.count > 6 }.map { country in
            if country.contains("a") || country.contains("A") {
                return country.replacingOccurrences(of: "a", with: "Y", options: .caseInsensitive)
            } else {
                return country
            }
        }
        print("Option 2 result: \(resArray)") // Option 2 result: ["GermYny", "Czech Republic", "DenmYrk", "CroYtiY", "IrelYnd", "YustriY"]
        
        // COMMENTS:
        /*  –ß—Ç–æ –¥–µ–ª–∞–µ—Ç –∫–æ–¥:
         
         1. filter { $0.count > 6 } - –æ—Ç–±–∏—Ä–∞–µ—Ç —Å—Ç—Ä–∞–Ω—ã –¥–ª–∏–Ω–Ω–µ–µ 6 —Å–∏–º–≤–æ–ª–æ–≤
         2. map { ... } - –ø—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç –∫–∞–∂–¥—É—é —Å—Ç—Ä–∞–Ω—É –ø–æ –ø—Ä–∞–≤–∏–ª—É:
         
         –ï—Å–ª–∏ –µ—Å—Ç—å 'A' –∏–ª–∏ 'a' ‚Üí –∑–∞–º–µ–Ω—è–µ—Ç –Ω–∞ 'Y'
         –ï—Å–ª–∏ –Ω–µ—Ç ‚Üí –æ—Å—Ç–∞–≤–ª—è–µ—Ç –∫–∞–∫ –µ—Å—Ç—å  */
        
        // Option 3
        let modifyArray = europeanUnion
            .filter { $0.count > 6 }
            .map { $0.replacingOccurrences(of: "a", with: "Y", options: .caseInsensitive) }
        print(modifyArray) // ["GermYny", "Czech Republic", "DenmYrk", "CroYtiY", "IrelYnd", "YustriY"]
        
    }
    static func task3ac_1() {
        print("–ó–∞–¥–∞—á–∞ 3a.3: –ù–∞–π—Ç–∏ –≤—Å–µ —Å—Ç—Ä–∞–Ω—ã, –∫–æ—Ç–æ—Ä—ã–µ –∑–∞–∫–∞–Ω—á–∏–≤–∞—é—Ç—Å—è –Ω–∞ –±—É–∫–≤—É 'y' –∏ –ø–µ—Ä–µ–≤–µ—Å—Ç–∏ –∏—Ö –≤ –≤–µ—Ä—Ö–Ω–∏–π —Ä–µ–≥–∏—Å—Ç—Ä")
        
        // option 1: üê¢ 'Imperative style'
        
        let euroUnion = [
            "France",
            "Czech Republic",
            "Italy",
            "Denmark",
            "Croatia",
            "Ireland",
            "Austria",
            "Sweden",
            "Poland"
        ]
        
        var upperResult: [String] = []
        for country in euroUnion {
            if country.hasSuffix("y") {
                upperResult.append(country.uppercased())
            }
        }
        print(upperResult) // ["ITALY"]
        
        // option 2: ü¶Ö 'Functional style'
        let upperRes = euroUnion
            .filter { $0.last == "y" }
            .map { $0.uppercased() }
        
        print(upperRes) // ["ITALY"]
        
        // ‚ö° –î–µ–∫–ª–∞—Ä–∞—Ç–∏–≤–Ω—ã–π —Å—Ç–∏–ª—å (—ç–∫—Å–ø–µ—Ä—Ç–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å)
        
        // –¢–≤–æ—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è –∑–¥–µ—Å—å (–º–∞–∫—Å–∏–º—É–º 1 —Å—Ç—Ä–æ–∫–∞ —Ü–µ–ø–æ—á–∫–∏!)
        let result = euroUnion
            .filter { $0.last == "y" }
            .map { $0.uppercased() }
        print(result) // ["ITALY"]
        
        //
        let res = euroUnion
            .compactMap { $0.hasSuffix("y") ? $0.uppercased() : nil }
        print(res) // ["ITALY"]
        
        // COMMENTS:
        /*  üí° –ü–æ—á–µ–º—É compactMap –±–æ–ª–µ–µ –¥–µ–∫–ª–∞—Ä–∞—Ç–∏–≤–Ω—ã–π:
         
         1) –û–¥–Ω–∞ –æ–ø–µ—Ä–∞—Ü–∏—è –≤–º–µ—Å—Ç–æ –¥–≤—É—Ö (filter + map)
         2) –ë–æ–ª–µ–µ –≤—ã—Ä–∞–∑–∏—Ç–µ–ª—å–Ω–æ - "–ø—Ä–µ–æ–±—Ä–∞–∑—É–π –µ—Å–ª–∏ —É—Å–ª–æ–≤–∏–µ, –∏–Ω–∞—á–µ –ø—Ä–æ–ø—É—Å—Ç–∏"
         3) –õ—É—á—à–∞—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å - –æ–¥–∏–Ω –ø—Ä–æ—Ö–æ–¥ –ø–æ –º–∞—Å—Å–∏–≤—É  */
    }
    
    static func task3a_2() {
        print("–ó–∞–¥–∞—á–∞ 3a.2: –°–æ–∑–¥–∞–π—Ç–µ –º–∞—Å–∏–≤ –∏–∑ 6 –∑–Ω–∞—á–µ–Ω–∏–π –ª—é–±–æ–≥–æ —Ç–∏–ø–∞. –°–¥–µ–ª–∞–π—Ç–µ –ª–∏–Ω–µ–π–Ω—É—é —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫—É - 'Selection Sort'.")
        
        // option 1: üê¢ 'Imperative style'
        var nums = [90, 21, 1, 888, 12, 45] // –°–æ–∑–¥–∞–π –º–∞—Å—Å–∏–≤
        print("–ò—Å—Ö–æ–¥–Ω—ã–π –º–∞—Å—Å–∏–≤: \(nums)")
        
        let countNums = nums.count
        
        // 2. –í–Ω–µ—à–Ω–∏–π —Ü–∏–∫–ª
        for i in 0..<countNums - 1 {
            var minIndex = i // –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º: min —ç–ª–µ–º–µ–Ω—Ç - –ø–µ—Ä–≤—ã–π –≤ –Ω–µ–æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–π —á–∞—Å—Ç–∏
            
            // 3. –í–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π —Ü–∏–∫–ª (–õ–ò–ù–ï–ô–ù–´–ô –ü–†–û–•–û–î –¥–ª—è –ø–æ–∏—Å–∫–∞ –º–∏–Ω–∏–º—É–º–∞)
            for j in i + 1..<countNums {
                if nums[j] < nums[minIndex] {
                    minIndex = j // –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω–¥–µ–∫—Å –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞
                }
            }
            
            // 4. –ü–æ—Å–ª–µ —Ç–æ–≥–æ –∫–∞–∫ –Ω–∞—à–ª–∏ min –≤ –ù–ï–æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–π —á–∞—Å—Ç–∏, –º–µ–Ω—è–µ–º –µ–≥–æ –º–µ—Å—Ç–∞–º–∏ —Å —ç–ª–µ–º–µ–Ω—Ç–æ–º –Ω–∞ –ø–æ–∑–∏—Ü–∏–∏ i
            if minIndex != i {
                nums.swapAt(i, minIndex) // –ë–æ–ª–µ–µ Swift-—Å–ø–æ—Å–æ–± –æ–±–º–µ–Ω–∞ —ç–ª–µ–º–µ–Ω—Ç–æ–≤
            }
        }
        
        // 6. –í—ã–≤–æ–¥ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ (–≤—ã–Ω–µ—Å–µ–Ω –∑–∞ –ø—Ä–µ–¥–µ–ª—ã —Ü–∏–∫–ª–∞)
        print("–û—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –º–∞—Å—Å–∏–≤: \(nums)") // –û—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –º–∞—Å—Å–∏–≤: [1, 12, 21, 45, 90, 888]
    }
    
    /*  –û–±—ä—è—Å–Ω–µ–Ω–∏–µ –∞–ª–≥–æ—Ä–∏—Ç–º–∞:
     
     - –í–Ω–µ—à–Ω–∏–π —Ü–∏–∫–ª (for i in 0..<countNums - 1) –ø—Ä–æ—Ö–æ–¥–∏—Ç –ø–æ –≤—Å–µ–º —ç–ª–µ–º–µ–Ω—Ç–∞–º –º–∞—Å—Å–∏–≤–∞, –∫—Ä–æ–º–µ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ
     - –í–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π —Ü–∏–∫–ª (for j in i+1..<countNums) –∏—â–µ—Ç min —ç–ª–µ–º–µ–Ω—Ç –≤ –Ω–µ–æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–π —á–∞—Å—Ç–∏ –º–∞—Å—Å–∏–≤–∞
     - –û–±–º–µ–Ω —ç–ª–µ–º–µ–Ω—Ç–æ–≤ - –º–µ–Ω—è–µ–º –º–µ—Å—Ç–∞–º–∏ —Ç–µ–∫—É—â–∏–π —ç–ª–µ–º–µ–Ω—Ç —Å –Ω–∞–π–¥–µ–Ω–Ω—ã–º min */
    
    // –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç —Å –≤—ã–≤–æ–¥–æ–º –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—ã—Ö —à–∞–≥–æ–≤:
    
    static func task3aa_2() {
        print("–ó–∞–¥–∞—á–∞ 3aa.2: –°–æ–∑–¥–∞–π—Ç–µ –º–∞—Å—Å–∏–≤ –∏–∑ 6 –∑–Ω–∞—á–µ–Ω–∏–π –ª—é–±–æ–≥–æ —Ç–∏–ø–∞. –°–¥–µ–ª–∞–π—Ç–µ –ª–∏–Ω–µ–π–Ω—É—é —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫—É (linear sort).")
        
        var nums = [90, 21, 1, 888, 12, 45]
        print("–ò—Å—Ö–æ–¥–Ω—ã–π –º–∞—Å—Å–∏–≤: \(nums)")
        
        let countNums = nums.count
        
        for i in 0..<countNums - 1 {
            var minIndex = i
            
            for j in i + 1..<countNums {
                if nums[j] < nums[minIndex] {
                    minIndex = j
                }
            }
            
            if minIndex != i {
                nums.swapAt(i, minIndex)
                print("–®–∞–≥ \(i + 1): –ü–æ–º–µ–Ω—è–ª–∏ \(nums[minIndex]) –∏ \(nums[i]) ‚Üí \(nums)")   // –í–æ—Ç –æ—Ç–∫—É–¥–∞ –ø–æ—è–≤–ª—è—é—Ç—Å—è —ç—Ç–∏ –ø—Ä–∏–Ω—Ç—ã!
            }
        }
        
        print("–§–∏–Ω–∞–ª—å–Ω—ã–π –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –º–∞—Å—Å–∏–≤: \(nums)")
    }
    /*  –û—Ç–∫—É–¥–∞ –≤–∑—è–ª–∏—Å—å —ç—Ç–∏ –ø—Ä–∏–Ω—Ç—ã:
     
     print("–®–∞–≥ \(i + 1): –ü–æ–º–µ–Ω—è–ª–∏ \(oldValueAtI) –∏ \(oldValueAtMinIndex) ‚Üí \(nums)") - —ç—Ç–∞ —Å—Ç—Ä–æ–∫–∞ –≤–Ω—É—Ç—Ä–∏ —É—Å–ª–æ–≤–∏—è if minIndex != i –≤—ã–≤–æ–¥–∏—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–∞–∂–¥–æ–º –æ–±–º–µ–Ω–µ —ç–ª–µ–º–µ–Ω—Ç–æ–≤
     –ö–∞–∫ —ç—Ç–æ —Ä–∞–±–æ—Ç–∞–µ—Ç –Ω–∞ –∫–∞–∂–¥–æ–º —à–∞–≥–µ:
     
     –ò—Å—Ö–æ–¥–Ω—ã–π –º–∞—Å—Å–∏–≤: [90, 21, 1, 888, 12, 45]
     
     –®–∞–≥ 1: –ù–∞—Ö–æ–¥–∏–º –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π —ç–ª–µ–º–µ–Ω—Ç (1) –∏ –º–µ–Ω—è–µ–º –µ–≥–æ —Å –ø–µ—Ä–≤—ã–º —ç–ª–µ–º–µ–Ω—Ç–æ–º (90)
     –®–∞–≥ 2: –í –æ—Å—Ç–∞–≤—à–µ–π—Å—è —á–∞—Å—Ç–∏ –Ω–∞—Ö–æ–¥–∏–º –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π (12) –∏ –º–µ–Ω—è–µ–º —Å–æ –≤—Ç–æ—Ä—ã–º —ç–ª–µ–º–µ–Ω—Ç–æ–º (21)
     –®–∞–≥ 3: –ù–∞—Ö–æ–¥–∏–º –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π (21) –≤ –æ—Å—Ç–∞–≤—à–µ–π—Å—è —á–∞—Å—Ç–∏ –∏ –º–µ–Ω—è–µ–º —Å —Ç—Ä–µ—Ç—å–∏–º —ç–ª–µ–º–µ–Ω—Ç–æ–º (90)
     –®–∞–≥ 4: –ù–∞—Ö–æ–¥–∏–º –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π (45) –∏ –º–µ–Ω—è–µ–º —Å —á–µ—Ç–≤–µ—Ä—Ç—ã–º —ç–ª–µ–º–µ–Ω—Ç–æ–º (888) */
    
    // –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç —Å –¥—Ä—É–≥–∏–º–∏ —Ç–∏–ø–∞–º–∏ –¥–∞–Ω–Ω—ã—Ö:
    
    static func task3ab_2() {
        print("–ó–∞–¥–∞—á–∞ 3a.2: –°–æ–∑–¥–∞–π—Ç–µ –º–∞—Å—Å–∏–≤ –∏–∑ 6 –∑–Ω–∞—á–µ–Ω–∏–π –ª—é–±–æ–≥–æ —Ç–∏–ø–∞. –°–¥–µ–ª–∞–π—Ç–µ –ª–∏–Ω–µ–π–Ω—É—é —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫—É")
        
        // –ú–∞—Å—Å–∏–≤ —Å—Ç—Ä–æ–∫
        var strings = ["banana", "apple", "cherry", "limon", "kiwi", "fig"]
        print("–ò—Å—Ö–æ–¥–Ω—ã–π –º–∞—Å—Å–∏–≤ —Å—Ç—Ä–æ–∫: \(strings)") // ü•ù ‚Üí üçé ‚Üí üçà ‚Üí üçå ‚Üí üçã ‚Üí üçí –ò—Å—Ö–æ–¥–Ω—ã–π –º–∞—Å—Å–∏–≤ —Å—Ç—Ä–æ–∫: ["banana", "apple", "cherry", "limon", "kiwi", "fig"]
        
        let count = strings.count
        
        for i in 0..<count - 1 {
            var minIndex = i
            for j in i+1..<count {
                if strings[j] < strings[minIndex] {
                    minIndex = j
                }
            }
            if minIndex != i {
                strings.swapAt(i, minIndex) // –ë–æ–ª–µ–µ Swift-—Å–ø–æ—Å–æ–± –æ–±–º–µ–Ω–∞ —ç–ª–µ–º–µ–Ω—Ç–æ–≤
            }
        }
        
        print("–û—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –º–∞—Å—Å–∏–≤ —Å—Ç—Ä–æ–∫: \(strings)") // –û—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –º–∞—Å—Å–∏–≤ —Å—Ç—Ä–æ–∫: üçéüçåüçíüçàü•ùüçã ["apple", "banana", "cherry", "fig", "kiwi", "limon"]
    }
    
    static func task3ac_2() {
        print("–ó–∞–¥–∞—á–∞ 3ac.2: –°–æ–∑–¥–∞–π—Ç–µ –º–∞—Å–∏–≤ –∏–∑ 12 –∑–Ω–∞—á–µ–Ω–∏–π –ª—é–±–æ–≥–æ —Ç–∏–ø–∞. –°–¥–µ–ª–∞–π—Ç–µ –ª–∏–Ω–µ–π–Ω—É—é —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫—É 'linear sort' –ø–æ –∞–ª—Ñ–∞–≤–∏—Ç—É.")
        
        var companyOfThorin = [
            "Thorin Oakenshield",
            "Balin", "Dwalin",
            "Fili", "Kili",
            "Dori", "Nori", "Ori", // –ë—Ä–∞—Ç—å—è!
            "Oin", "Gloin",
            "Bifur", "Bofur", "Bombur",
            "Bilbo Baggins" // –ù–∞—à –ª—é–±–∏–º—ã–π —Ö–æ–±–±–∏—Ç!
        ]
        print("–ò—Å—Ö–æ–¥–Ω—ã–π —Å–æ—Å—Ç–∞–≤ '–¢–æ—Ä–∏–Ω –∏ –ö': \(companyOfThorin)") // –ò—Å—Ö–æ–¥–Ω—ã–π —Å–æ—Å—Ç–∞–≤ '–¢–æ—Ä–∏–Ω –∏ –ö': ["Thorin Oakenshield", "Balin", "Dwalin", "Fili", "Kili", "Dori", "Nori", "Ori", "Oin", "Gloin", "Bifur", "Bofur", "Bombur", "Bilbo Baggins"]
        
        let trevelerCount = companyOfThorin.count
        
        for treveler in 0..<trevelerCount - 1 {
            var minIndex = treveler
            for dwarf in treveler + 1..<trevelerCount {
                if companyOfThorin[dwarf] < companyOfThorin[minIndex] {
                    minIndex = dwarf
                }
            }
            if minIndex != treveler {
                companyOfThorin.swapAt(treveler, minIndex)
            }
        }
        print("–°–æ—Å—Ç–∞–≤ '–¢–æ—Ä–∏–Ω –∏ –ö' –ø–æ –∞–ª—Ñ–∞–≤–∏—Ç—É: \(companyOfThorin).") // –°–æ—Å—Ç–∞–≤ '–¢–æ—Ä–∏–Ω –∏ –ö' –ø–æ –∞–ª—Ñ–∞–≤–∏—Ç—É: ["Dwalin", "Fili", "Kili", "Dori", "Nori", "Ori", "Oin", "Gloin", "Bifur", "Bofur", "Bombur", "Bilbo Baggins", "Balin", "Thorin Oakenshield"]
        
    }
    
    static func task3ad_2() {
        print("–ó–∞–¥–∞—á–∞ 3ad.2: –°–æ–∑–¥–∞–π—Ç–µ –º–∞—Å–∏–≤ –∏–∑ 12 –∑–Ω–∞—á–µ–Ω–∏–π –ª—é–±–æ–≥–æ —Ç–∏–ø–∞. –°–¥–µ–ª–∞–π—Ç–µ –ª–∏–Ω–µ–π–Ω—É—é —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫—É 'linear sort' –ø–æ –∞–ª—Ñ–∞–≤–∏—Ç—É.")
        // ‚úÖ –ü—É—Ç—å 2: –î–µ–∫–ª–∞—Ä–∞—Ç–∏–≤–Ω—ã–π (–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –≤—Å—Ç—Ä–æ–µ–Ω–Ω–æ–π —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏)
        
        var companyOfThorin = [
            "Thorin",
            "Balin", "Dwalin",
            "Fili", "Kili",
            "Bilbo Baggins" // –ù–∞—à –ª—é–±–∏–º—ã–π —Ö–æ–±–±–∏—Ç!
        ]
        companyOfThorin.sort() // in-place
        print(companyOfThorin) // ["Balin", "Bilbo Baggins", "Dwalin", "Fili", "Kili", "Thorin"]
        // –∏–ª–∏
        let sortedArray = companyOfThorin.sorted() // –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ù–û–í–´–ô –º–∞—Å—Å–∏–≤
        print(companyOfThorin) // ["Balin", "Bilbo Baggins", "Dwalin", "Fili", "Kili", "Thorin"]
    }
    
    static func task3ae_2() {
        print("–ó–∞–¥–∞—á–∞ 3ae.2: –∏—Å–ø–æ–ª—å–∑—É–π —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫—É –≤—ã–±–æ—Ä–æ–º - 'linear sort' - –ø–æ –ø–æ–ª—é ‚Äú–≤–æ–∑—Ä–∞—Å—Ç‚Äù –∏ –≤—ã–≤–µ–¥–∏ –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫.")
        
        struct Hobbit {
            var name: String
            var age: Int
        }
        var friends = [
            Hobbit(name: "Frodo", age: 60),
            Hobbit(name: "Sam", age: 46),
            Hobbit(name: "Pin", age: 33),
            Hobbit(name: "Merry", age: 36),
            Hobbit(name: "Folko", age: 35)
            
        ]
        print("–ò—Å—Ö–æ–¥–Ω—ã–π –º–∞—Å—Å–∏–≤:")
        friends.forEach { print("\($0.name) ‚Äî –≤–æ–∑—Ä–∞—Å—Ç \($0.age)") }
        
        /*   –ò—Å—Ö–æ–¥–Ω—ã–π –º–∞—Å—Å–∏–≤:
         Frodo ‚Äî –≤–æ–∑—Ä–∞—Å—Ç 60
         Sam ‚Äî –≤–æ–∑—Ä–∞—Å—Ç 46
         Pin ‚Äî –≤–æ–∑—Ä–∞—Å—Ç 33
         Merry ‚Äî –≤–æ–∑—Ä–∞—Å—Ç 36
         Folko ‚Äî –≤–æ–∑—Ä–∞—Å—Ç 35  */
        
        for friend in 0..<friends.count - 1 {
            var minIndex = friend // –ø—Ä–µ–¥–ø–æ–ª–æ–∂—É, —á—Ç–æ min —ç–ª–µ–º–µ–Ω—Ç - 1-—ã–π –≤ –º–∞—Å—Å–∏–≤–µ
            
            for hobbit in friend + 1..<friends.count {
                if friends[hobbit].age < friends[minIndex].age {
                    minIndex = hobbit
                }
            }
            if minIndex != friend {
                friends.swapAt(friend, minIndex)
            }
        }
        print("–û—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–æ –≤–æ–∑—Ä–∞—Å—Ç—É –º–∞—Å—Å–∏–≤ —Ö–æ–±–±–∏—Ç–æ–≤:")
        friends.forEach { print("\($0.name) ‚Äî –≤–æ–∑—Ä–∞—Å—Ç \($0.age)") }
    }
    /*  –û—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–æ –≤–æ–∑—Ä–∞—Å—Ç—É –º–∞—Å—Å–∏–≤ —Ö–æ–±–±–∏—Ç–æ–≤:
     Pin ‚Äî –≤–æ–∑—Ä–∞—Å—Ç 33
     Folko ‚Äî –≤–æ–∑—Ä–∞—Å—Ç 35
     Merry ‚Äî –≤–æ–∑—Ä–∞—Å—Ç 36
     Sam ‚Äî –≤–æ–∑—Ä–∞—Å—Ç 46
     Frodo ‚Äî –≤–æ–∑—Ä–∞—Å—Ç 60  */
    
    // Swift-—Å—Ç–∏–ª—å —Å –≤—Å—Ç—Ä–æ–µ–Ω–Ω–æ–π —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–æ–π (—Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –¥–ª—è production)
    
    static func task3a_2_swiftStyle() {
        print("–ó–∞–¥–∞—á–∞ 3ae.2: —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ –≤–æ–∑—Ä–∞—Å—Ç—É - Swift-—Å—Ç–∏–ª—å —Å –≤—Å—Ç—Ä–æ–µ–Ω–Ω–æ–π —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–æ–π (—Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –¥–ª—è production)")
        
        struct Hobbit {
            let name: String
            let age: Int
        }
        
        var friends = [
            Hobbit(name: "Frodo", age: 60),
            Hobbit(name: "Sam", age: 46),
            Hobbit(name: "Pin", age: 33),
            Hobbit(name: "Merry", age: 36),
            Hobbit(name: "Folko", age: 35)
        ]
        
        print("–ò—Å—Ö–æ–¥–Ω—ã–π –º–∞—Å—Å–∏–≤:")
        friends.forEach { print("\($0.name) ‚Äî –≤–æ–∑—Ä–∞—Å—Ç \($0.age)") }
        
        // Swift-—Å—Ç–∏–ª—å —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏ - –æ–¥–Ω–∞ —Å—Ç—Ä–æ–∫–∞!
        friends.sort { $0.age < $1.age }
        
        print("\n–û—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–æ –≤–æ–∑—Ä–∞—Å—Ç—É –º–∞—Å—Å–∏–≤:")
        friends.forEach { print("\($0.name) ‚Äî –≤–æ–∑—Ä–∞—Å—Ç \($0.age)") }
    }
    /*  –û—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–æ –≤–æ–∑—Ä–∞—Å—Ç—É –º–∞—Å—Å–∏–≤:
     Pin ‚Äî –≤–æ–∑—Ä–∞—Å—Ç 33
     Folko ‚Äî –≤–æ–∑—Ä–∞—Å—Ç 35
     Merry ‚Äî –≤–æ–∑—Ä–∞—Å—Ç 36
     Sam ‚Äî –≤–æ–∑—Ä–∞—Å—Ç 46
     Frodo ‚Äî –≤–æ–∑—Ä–∞—Å—Ç 60  */
    
    
    // –§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π —Å—Ç–∏–ª—å —Å —Å–æ–∑–¥–∞–Ω–∏–µ–º –Ω–æ–≤–æ–≥–æ –º–∞—Å—Å–∏–≤–∞
    
    static func task3a_2_functional() {
        print("–ó–∞–¥–∞—á–∞ 3ag.2: —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π —Å—Ç–∏–ª—å")
        
        struct Wizard {
            let name: String
            let age: Int
        }
        
        let wizards = [
            Wizard(name: "Gandalf the Gray", age: 2050),
            Wizard(name: "Saruman the White", age: 2222),
            Wizard(name: "Radagast the Broun", age: 2021)
        ]
        
        print("–ò—Å—Ö–æ–¥–Ω—ã–π –º–∞—Å—Å–∏–≤:")
        wizards.forEach { print("\($0.name) ‚Äî –≤–æ–∑—Ä–∞—Å—Ç \($0.age)") }
        
        // –§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π –ø–æ–¥—Ö–æ–¥ - —Å–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—ã–π –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –º–∞—Å—Å–∏–≤
        let sortedWizards = wizards.sorted { $0.age < $1.age }
        
        print("\n–û—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–æ –≤–æ–∑—Ä–∞—Å—Ç—É –º–∞—Å—Å–∏–≤ üßô‚Äç‚ôÇÔ∏è:")
        sortedWizards.forEach { print("\($0.name) ‚Äî –≤–æ–∑—Ä–∞—Å—Ç \($0.age)") }
    }
    /*  –û—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–æ –≤–æ–∑—Ä–∞—Å—Ç—É –º–∞—Å—Å–∏–≤ üßô‚Äç‚ôÇÔ∏è:
     Radagast the Broun ‚Äî –≤–æ–∑—Ä–∞—Å—Ç 2021
     Gandalf the Gray ‚Äî –≤–æ–∑—Ä–∞—Å—Ç 2050
     Saruman the White ‚Äî –≤–æ–∑—Ä–∞—Å—Ç 2222    */
    
    // –£–ª—É—á—à–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è –≤–∞—à–µ–≥–æ –∞–ª–≥–æ—Ä–∏—Ç–º–∞ —Å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è–º–∏
    static func task3a_2_perfect() {
        print("–ó–∞–¥–∞—á–∞ 3ah.2: —É–ª—É—á—à–µ–Ω–Ω–∞—è —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –≤—ã–±–æ—Ä–æ–º - 'linear sort'.")
        
        struct Human {
            let name: String
            let age: Int
        }
        
        var humansOfRohan = [
            Human(name: "Teoden", age: 72),
            Human(name: "Eomer", age: 33),
            Human(name: "√âowyn", age: 24),
            Human(name: "Th√©odred", age: 27),
            Human(name: "Gr√≠ma Wormtongue", age: 38)
        ]
        
        print("–ò—Å—Ö–æ–¥–Ω—ã–π –º–∞—Å—Å–∏–≤:")
        humansOfRohan.enumerated().forEach { index, human in
            print("\(index + 1). \(human.name) ‚Äî \(human.age) –ª–µ—Ç")
        }
        
        // –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –≤—ã–±–æ—Ä–æ–º —Å –ø–æ–¥—Ä–æ–±–Ω—ã–º–∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è–º–∏
        for currentIndex in 0..<humansOfRohan.count - 1 {
            var minIndex = currentIndex
            
            // –ü–æ–∏—Å–∫ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞ –≤ –æ—Å—Ç–∞–≤—à–µ–π—Å—è —á–∞—Å—Ç–∏
            for searchIndex in (currentIndex + 1)..<humansOfRohan.count {
                if humansOfRohan[searchIndex].age < humansOfRohan[minIndex].age {
                    minIndex = searchIndex
                }
            }
            
            // –û–±–º–µ–Ω –º–µ—Å—Ç–∞–º–∏, –µ—Å–ª–∏ –Ω–∞—à–ª–∏ –º–µ–Ω—å—à–∏–π —ç–ª–µ–º–µ–Ω—Ç
            if minIndex != currentIndex {
                humansOfRohan.swapAt(currentIndex, minIndex)
            }
        }
        
        print("\n–û—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–æ –≤–æ–∑—Ä–∞—Å—Ç—É –º–∞—Å—Å–∏–≤ –ª—é–¥–µ–π –†–æ—Ö–∞–Ω–∞:")
        humansOfRohan.enumerated().forEach { index, human in
            print("\(index + 1). \(human.name) ‚Äî \(human.age) –ª–µ—Ç")
        }
    }
    /*  –û—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–æ –≤–æ–∑—Ä–∞—Å—Ç—É –º–∞—Å—Å–∏–≤ –ª—é–¥–µ–π –†–æ—Ö–∞–Ω–∞:
     1. √âowyn ‚Äî 24 –ª–µ—Ç
     2. Th√©odred ‚Äî 27 –ª–µ—Ç
     3. Eomer ‚Äî 33 –ª–µ—Ç
     4. Gr√≠ma Wormtongue ‚Äî 38 –ª–µ—Ç
     5. Teoden ‚Äî 72 –ª–µ—Ç */
    
    // 4. –°–∞–º—ã–π –∫–æ–º–ø–∞–∫—Ç–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç
    
    static func task3a_2_compact() {
        struct Human { let name: String; let age: Int }
        
        var gondors = [
            Human(name: "Aragorn", age: 333),
            Human(name: "Boromir", age: 36),
            Human(name: "Faramir", age: 32),
            Human(name: "Denethor", age: 88),
            Human(name: "Beregond", age: 28)
        ]
        
        print("–ò—Å—Ö–æ–¥–Ω—ã–π –º–∞—Å—Å–∏–≤ –≥–æ–Ω–¥–æ—Ä—Ü–µ–≤:"); gondors.forEach { print("\($0.name) - \($0.age)") }
        gondors.sort(by: { $0.age < $1.age })
        print("–û—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –º–∞—Å—Å–∏–≤ –≥–æ–Ω–¥–æ—Ä—Ü–µ–≤:"); gondors.forEach { print("\($0.name) - \($0.age)") }
    }
    /*   –ò—Å—Ö–æ–¥–Ω—ã–π –º–∞—Å—Å–∏–≤ –≥–æ–Ω–¥–æ—Ä—Ü–µ–≤:
     Aragorn - 333
     Boromir - 36
     Faramir - 32
     Denethor - 88
     Beregond - 28
     
     –û—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –º–∞—Å—Å–∏–≤ –≥–æ–Ω–¥–æ—Ä—Ü–µ–≤:
     Beregond - 28
     Faramir - 32
     Boromir - 36
     Denethor - 88
     Aragorn - 333   */
    
    static func task3a_3() {
        print("–ó–∞–¥–∞—á–∞ 3a.3: .–ù–∞–π–¥–∏ –≤—Å–µ –∞–Ω–∞–≥—Ä–∞–º–º—ã –≤ –º–∞—Å—Å–∏–≤–µ —Å–ª–æ–≤ –∏ —Å–≥—Ä—É–ø–ø–∏—Ä—É–π —Å–ª–æ–≤–∞-–∞–Ω–∞–≥—Ä–∞–º–º—ã –≤–º–µ—Å—Ç–µ.")
        
        
        let words = ["cat", "act", "dog", "god", "tac", "hello", "world", "listen", "silent"]
        
        var groups: [String: [String]] = [:]
        
        for word in words {
            let key = String(word.sorted())
            if groups[key] == nil {
                groups[key] = [word]
            } else {
                groups[key]!.append(word)
            }
        }
        
        let result = Array(groups.values)
        print(result) // [["listen", "silent"], ["world"], ["dog", "god"], ["hello"], ["cat", "act", "tac"]]
    }
    
    
    static func task3a_4() {
        print("–ó–∞–¥–∞—á–∞ 3a.4: –°–æ–∑–¥–∞–π—Ç–µ –º–∞—Å–∏–≤ –∏–∑ 6 –∑–Ω–∞—á–µ–Ω–∏–π –ª—é–±–æ–≥–æ —Ç–∏–ø–∞. –°–¥–µ–ª–∞–π—Ç–µ –ª–∏–Ω–µ–π–Ω—É—é —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫—É (linear sort.")
        
        
        
    }
    static func task3a_5() {
        print("–ó–∞–¥–∞—á–∞ 3a.5: –°–æ–∑–¥–∞–π—Ç–µ –º–∞—Å–∏–≤ –∏–∑ 6 –∑–Ω–∞—á–µ–Ω–∏–π –ª—é–±–æ–≥–æ —Ç–∏–ø–∞. –°–¥–µ–ª–∞–π—Ç–µ –ª–∏–Ω–µ–π–Ω—É—é —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫—É (linear sort.")
        
    }
    static func task3a_6() {
        print("–ó–∞–¥–∞—á–∞ 3a.6: –°–æ–∑–¥–∞–π—Ç–µ –º–∞—Å–∏–≤ –∏–∑ 6 –∑–Ω–∞—á–µ–Ω–∏–π –ª—é–±–æ–≥–æ —Ç–∏–ø–∞. –°–¥–µ–ª–∞–π—Ç–µ –ª–∏–Ω–µ–π–Ω—É—é —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫—É (linear sort.")
        
    }
    
    static func task3a_7() { // –û–±—ä—è–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—á–µ—Å–∫–æ–π —Ñ—É–Ω–∫—Ü–∏–∏ –±–µ–∑ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º–æ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è
        print("–ó–∞–¥–∞—á–∞ 3a.2: –ì—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ –ø–æ –∫–ª—é—á—É (—Ö–æ–±–±–∏—Ç–æ–≤ –ø–æ 'race').") // –í—ã–≤–æ–¥ –≤ –∫–æ–Ω—Å–æ–ª—å –Ω–∞–∑–≤–∞–Ω–∏—è –∑–∞–¥–∞—á–∏. –û–∂–∏–¥–∞–µ–º—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç - "Hobbit": ["Frodo", "Sam"], "Wizard": ["Gandalf"], "Elf": ["Legolas"].")
        
        struct Character { // –û–±—ä—è–≤–ª–µ–Ω–∏–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã Character —Å –¥–≤—É–º—è —Å–≤–æ–π—Å—Ç–≤–∞–º–∏
            let name: String    // –ò–º—è –ø–µ—Ä—Å–æ–Ω–∞–∂–∞
            let race: String    // –†–∞—Å–∞ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞
        }
        
        let characters = [  // –°–æ–∑–¥–∞–Ω–∏–µ –º–∞—Å—Å–∏–≤–∞ —ç–∫–∑–µ–º–ø–ª—è—Ä–æ–≤ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã Character
            Character(name: "Frodo", race: "Hobbit"),
            Character(name: "Gandalf", race: "Wizard"),
            Character(name: "Legolas", race: "Elf"),
            Character(name: "Sam", race: "Hobbit")
        ]
        
        // üîÅ –ï–¥–∏–Ω—ã–π –∞–ª–≥–æ—Ä–∏—Ç–º –¥–ª—è –≤—Å–µ—Ö –∑–∞–¥–∞—á:
        // 1. –°–æ–∑–¥–∞–µ–º –ø—É—Å—Ç–æ–π –°–õ–û–í–ê–†–¨ –¥–ª—è –ì–†–£–ü–ü - –∫–ª—é—á: —Ä–∞—Å–∞, –∑–Ω–∞—á–µ–Ω–∏–µ: –º–∞—Å—Å–∏–≤ –ò–ú–ï–ù
        var races: [String: [String]] = [:]
        
        // 2. –ü—Ä–æ—Ö–æ–¥–∏–º –ø–æ –í–°–ï–ú —ç–ª–µ–º–µ–Ω—Ç–∞–º –º–∞—Å—Å–∏–≤–∞ characters
        for character in characters {
            // 3. –í—ã—á–∏—Å–ª—è–µ–º –ö–õ–Æ–ß –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞ (—Ä–∞—Å–∞ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞)
            let key = character.race // –∑–∞–≤–∏—Å–∏—Ç –æ—Ç –∑–∞–¥–∞—á–∏
            
            // 4. –î–æ–±–∞–≤–ª—è–µ–º —ç–ª–µ–º–µ–Ω—Ç –≤ –≥—Ä—É–ø–ø—É —Å —ç—Ç–∏–º –∫–ª—é—á–æ–º
            if races[key] == nil {
                races[key] = [character.name] // –ï—Å–ª–∏ –≥—Ä—É–ø–ø—ã —Å —Ç–∞–∫–æ–π —Ä–∞—Å–æ–π –µ—â–µ –Ω–µ—Ç - —Å–æ–∑–¥–∞–µ–º –ù–û–í–£–Æ
            } else {
                races[key]!.append(character.name)  // –ï—Å–ª–∏ –≥—Ä—É–ø–ø–∞ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç - –¥–æ–±–∞–≤–ª—è–µ–º –∏–º—è –≤ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –º–∞—Å—Å–∏–≤
            }
        }
        
        print("–ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ race:") // –í—ã–≤–æ–¥–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∏ –≤ –∫–æ–Ω—Å–æ–ª—å
        
        for (race, names) in races { // –ü—Ä–æ—Ö–æ–¥–∏–º –ø–æ –≤—Å–µ–º –ø–∞—Ä–∞–º –∫–ª—é—á-–∑–Ω–∞—á–µ–Ω–∏–µ –≤ —Å–ª–æ–≤–∞—Ä–µ races
            // –í—ã–≤–æ–¥–∏–º —Ä–∞—Å—É –∏ —Å–ø–∏—Å–æ–∫ –∏–º–µ–Ω —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é
            print("\(race): \(names.joined(separator: ", "))")
            /* –û–∂–∏–¥–∞–µ–º—ã–π –≤—ã–≤–æ–¥:
             Elf: Legolas
             Wizard: Gandalf
             Hobbit: Frodo, Sam     */
        }
    }
    static func task3ab_7() {
        print("–ó–∞–¥–∞—á–∞ 3a.7: üìù –°–≥—Ä—É–ø–ø–∏—Ä—É–π –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π –ø–æ –ø–µ—Ä–≤–æ–π –±—É–∫–≤–µ –∏–º–µ–Ω–∏.")
        
        struct Character {
            let name: String
            let race: String
        }
        
        let characters = [
            Character(name: "Frodo", race: "Hobbit"),
            Character(name: "Gandalf", race: "Wizard"),
            Character(name: "Legolas", race: "Elf"),
            Character(name: "Sam", race: "Hobbit"),
            Character(name: "Aragorn", race: "Human") // –î–æ–±–∞–≤–∏–º –¥–ª—è –ø—Ä–∏–º–µ—Ä–∞
        ]
        
        var charDict: [String: [String]] = [:]
        for char in characters {
            let firstLetter = String(char.name.first ?? " ")
            charDict[firstLetter] = (charDict[firstLetter] ?? []) + [char.name]
        }
        
        // –í—ã–≤–æ–¥–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        print("–†–µ–∑—É–ª—å—Ç–∞—Ç –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∏:")
        for (key, values) in charDict.sorted(by: { $0.key < $1.key }) {
            print("\(key): \(values.joined(separator: ", "))")
        }
    }
    
    // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∫—Ä–∞—Å–∏–≤–æ–≥–æ –≤—ã–≤–æ–¥–∞ (–æ—Ç–¥–µ–ª—å–Ω–æ)
    func printBeautifully(charDict: [String: [String]]) {
        for (key, values) in charDict.sorted(by: { $0.key < $1.key }) {
            print("\(key): \(values.joined(separator: ", "))")
        }
    } /* –†–µ–∑—É–ª—å—Ç–∞—Ç –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∏:
       A: Aragorn
       F: Frodo
       G: Gandalf
       L: Legolas
       S: Sam   */
    
    static func task3a—Å_7() {
        print("–ó–∞–¥–∞—á–∞ 3ac.7: üìù –°–≥—Ä—É–ø–ø–∏—Ä—É–π –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π –ø–æ –¥–ª–∏–Ω–µ –∏–º–µ–Ω–∏ / —Ä–∞—Å—ã. –°—É—Ç—å: –æ—Ç –º–∞—Å—Å–∏–≤–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä - –∫ —Å–ª–æ–≤–∞—Ä—é —á–∏—Å–µ–ª –∏ —Å—Ç—Ä–æ–∫.")
        
        struct Character {
            let name: String
            let race: String
        }
        
        let characters = [
            Character(name: "Frodo", race: "Hobbit"),
            Character(name: "Gandalf", race: "Wizard"),
            Character(name: "Legolas", race: "Elf"),
            Character(name: "Sam", race: "Hobbit"),
            Character(name: "Aragorn", race: "Human")
        ]
        
        var emptyDict: [Int: [String]] = [:] // –ø—É—Å—Ç–æ–π —Å–ª–æ–≤–∞—Ä—å –¥–ª—è –≥—Ä—É–ø–ø
        
        for char in characters { // —Ü–∏–∫–ª–æ–º –ø—Ä–æ–π–¥–∏ –ø–æ –≤—Å–µ–º—É –º–∞—Å—Å–∏–≤—É —Å—Ç—Ä—É–∫—Ç—É—Ä
            let countName = char.name.count // –Ω–µ –Ω—É–∂–Ω–æ –ø—Ä–æ–≤–µ—Ä—è—Ç—å –Ω–∞ nil
            
            emptyDict[countName] = (emptyDict[countName] ?? []) + [char.name]
        }
        // –í—ã–≤–æ–¥–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        print("–ò—Ç–∞–∫:")
        for (key, values) in emptyDict.sorted(by: { $0.key < $1.key }) {
            print("\(key): \(values.joined(separator: ", "))")
        }
    }
    
    // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∫—Ä–∞—Å–∏–≤–æ–≥–æ –≤—ã–≤–æ–¥–∞ (–æ—Ç–¥–µ–ª—å–Ω–æ)
    func printBeauty(emptyDict: [String: [String]]) {
        for (key, values) in emptyDict.sorted(by: { $0.key < $1.key }) {
            print("\(key): \(values.joined(separator: ", "))")
        }
    } /* –°—É—Ç—å: –æ—Ç –º–∞—Å—Å–∏–≤–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä - –∫ —Å–ª–æ–≤–∞—Ä—é —Å—Ç—Ä–æ–∫.
       –ò—Ç–∞–∫:
       3: Sam
       5: Frodo
       7: Gandalf, Legolas, Aragorn */
    
    static func task3ad_7() {
        print("–ó–∞–¥–∞—á–∞ 3ad.7: üìù –°–≥—Ä—É–ø–ø–∏—Ä—É–π –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π –ø–æ –¥–ª–∏–Ω–µ —Ä–∞—Å—ã. Nil-coalescing. –°—É—Ç—å: –æ—Ç –º–∞—Å—Å–∏–≤–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä - –∫ —Å–ª–æ–≤–∞—Ä—é —á–∏—Å–µ–ª –∏ —Å—Ç—Ä–æ–∫.")
        
        struct Character {
            let name: String
            let race: String
        }
        
        let characters = [
            Character(name: "Frodo", race: "Hobbit"),
            Character(name: "Gandalf", race: "Wizard"),
            Character(name: "Legolas", race: "Elf"),
            Character(name: "Sam", race: "Hobbit"),
            Character(name: "Aragorn", race: "Human")
        ]
        var emptyDict: [Int: [String]] = [:]
        
        for char in characters {
            let raceCount = char.race.count
            emptyDict[raceCount] = (emptyDict[raceCount] ?? []) + [char.race]
        }
        print("Result:")
        for (key, values) in emptyDict.sorted(by: { $0.key < $1.key }) {
            print("\(key): \(values.joined(separator: ", "))")
        }
    } /* Result:
       3: Elf
       5: Human
       6: Hobbit, Wizard, Hobbit */
    
    static func task3ae_7() {
        print("–ó–∞–¥–∞—á–∞ 3ae.7: üìù –°–≥—Ä—É–ø–ø–∏—Ä—É–π –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π –ø–æ –¥–ª–∏–Ω–µ —Ä–∞—Å—ã. –¶–∏–∫–ª for-in. –°—É—Ç—å: –æ—Ç –º–∞—Å—Å–∏–≤–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä - –∫ —Å–ª–æ–≤–∞—Ä—é —á–∏—Å–µ–ª –∏ —Å—Ç—Ä–æ–∫.")
        
        struct Character {
            let name: String
            let race: String
        }
        
        let characters = [
            Character(name: "Frodo", race: "Hobbit"),
            Character(name: "Gandalf", race: "Wizard"),
            Character(name: "Legolas", race: "Elf"),
            Character(name: "Sam", race: "Hobbit"),
            Character(name: "Aragorn", race: "Human")
        ]
        var emptyDict: [Int: [String]] = [:]
        
        for char in characters {
            let raceCount = char.race.count
            // 4. –î–æ–±–∞–≤–ª—è–µ–º —ç–ª–µ–º–µ–Ω—Ç –≤ –≥—Ä—É–ø–ø—É —Å —ç—Ç–∏–º –∫–ª—é—á–æ–º
            if emptyDict[raceCount] == nil {
                emptyDict[raceCount] = [char.race] // –ï—Å–ª–∏ –≥—Ä—É–ø–ø—ã —Å —Ç–∞–∫–æ–π —Ä–∞—Å–æ–π –µ—â–µ –Ω–µ—Ç - —Å–æ–∑–¥–∞–µ–º –ù–û–í–£–Æ
            } else {
                emptyDict[raceCount]!.append(char.race)  // –ï—Å–ª–∏ –≥—Ä—É–ø–ø–∞ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç - –¥–æ–±–∞–≤–ª—è–µ–º –∏–º—è –≤ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –º–∞—Å—Å–∏–≤
            }
        }
        print("–†–µ–ó—É–õ—å–¢–∞–¢:")
        for (key, values) in emptyDict.sorted(by: { $0.key < $1.key }) {
            print("\(key): \(values.joined(separator: ", "))")
    }
} /*    –†–µ–ó—É–õ—å–¢–∞–¢:
        3: Elf
        5: Human
        6: Hobbit, Wizard, Hobbit */

static func task3af_7() {
    print("–ó–∞–¥–∞—á–∞ 3ae.7: üìù –°–≥—Ä—É–ø–ø–∏—Ä—É–π –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π –ø–æ –¥–ª–∏–Ω–µ —Ä–∞—Å—ã. –§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π —Å—Ç–∏–ª—å. –°—É—Ç—å: –æ—Ç –º–∞—Å—Å–∏–≤–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä - –∫ —Å–ª–æ–≤–∞—Ä—é —á–∏—Å–µ–ª –∏ —Å—Ç—Ä–æ–∫.")
    
    struct Character {
        let name: String
        let race: String
    }
    
    let characters = [
        Character(name: "Frodo", race: "Hobbit"),
        Character(name: "Gandalf", race: "Wizard"),
        Character(name: "Legolas", race: "Elf"),
        Character(name: "Sam", race: "Hobbit"),
        Character(name: "Aragorn", race: "Human")
    ]
    
    let grouped = characters.reduce(into: [Int: [String]]()) { resultDict, char in
        let key = char.race.count
        resultDict[key, default: []].append(char.race)
    }
    print("Result:")
    for (key, values) in grouped.sorted(by: { $0.key < $1.key }) {
        print("\(key): \(values.joined(separator: ", "))")
        } // üí° reduce(into:) ‚Äî —ç—Ç–æ –∫–∞–∫ "–∞–∫–∫—É–º—É–ª—è—Ç–æ—Ä"
    // array.reduce(into: –Ω–∞—á–∞–ª—å–Ω–æ–µ_–∑–Ω–∞—á–µ–Ω–∏–µ) { —Ä–µ–∑—É–ª—å—Ç–∞—Ç, —ç–ª–µ–º–µ–Ω—Ç in
        // –∏–∑–º–µ–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    }
} /*    Result:
            3: Elf
            5: Human
            6: Hobbit, Wizard, Hobbit   */


