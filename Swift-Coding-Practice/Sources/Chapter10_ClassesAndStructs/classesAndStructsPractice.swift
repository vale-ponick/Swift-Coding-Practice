//
//  classesAndStructsPractice.swift
//  Swift-Coding-Practice
//
//  Created by –í–∞–ª–µ—Ä–∏—è –ü–æ–Ω–æ–º–∞—Ä–µ–≤–∞ on 19.10.2025.
//

import Foundation

public struct Chapter10_ClassesAndStructs {
    public static func runAllTasks() {
        print("=== –ì–ª–∞–≤–∞ 10: –ö–ª–∞—Å—Å—ã –∏ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã ===")
        
        task10_1()
        task10a_1()
        task10b_1()
        task10c_1()
        task10_2()
        task10_3()
        task10_4()
        task10a_4()
        task10b_4()
        task10—Å_4()
        task10a_5()
        task10b_5()
        task10c_5()
        task10d_5()
        task10e_5()
        task10f_5()
        task10g_5()
        task10h_5()
        task10_6()
    }
    
    static func task10_1() {
        print("–ó–∞–¥–∞—á–∞ 10.1: –ù–∞–ø–∏—à–∏ –ø—Ä–æ—Å—Ç—ã–µ –∫–ª–∞—Å—Å—ã —Å –Ω–∞—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ–º –∏ –±–µ–∑.")
        
        // –ø—Ä–æ—Å—Ç–æ–π –∫–ª–∞—Å—Å –ë–ï–ó –Ω–∞—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è
        class Animal {
            // properties (data)
            var dog: String
            var cat: String
            var mouse: String
            
            // init to set values for properties
            init(dog: String, cat: String, mouse: String) {
                self.dog = dog
                self.cat = cat
                self.mouse = mouse
            }
            // method (function) to dusplay enimal detail
            func displayDetails() {
                print("Animals: dog - \(dog), cat - \(cat), mouse - \(mouse)")
            }
            /* === –ì–ª–∞–≤–∞ 10: –ö–ª–∞—Å—Å—ã –∏ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã ===
             –ó–∞–¥–∞—á–∞ 10.1: –ù–∞–ø–∏—à–∏ –ø—Ä–æ—Å—Ç—ã–µ –∫–ª–∞—Å—Å—ã —Å –Ω–∞—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ–º –∏ –±–µ–∑.
             Animal's discribing: Shania
             Animals: dog - Shania, cat - no cat, mouse - many  */
        }
        // creat an instance (object) of the Animal class
        let animalTest = Animal(dog: "Shania", cat: "no cat", mouse: "many")
        
        // Access properties and call methods of the object
        print("Animal's discribing: \(animalTest.dog)")
        animalTest.displayDetails()
    }
    
    static func task10a_1() {
        print("–ó–∞–¥–∞—á–∞ 10a.1: –ó–∞–¥–∞—á–∞ 10.1: –ù–∞–ø–∏—à–∏ –ø—Ä–æ—Å—Ç—ã–µ –∫–ª–∞—Å—Å—ã —Å –Ω–∞—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ–º.")
        
        class People {
            var name: String
            var nick: String
            var age: Int
            
            init(name: String, nick: String, age: Int) {
                self.name = name
                self.nick = nick
                self.age = age
            }
            func isAdult() -> Bool {
                return age >= 18 // –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–æ
            }
        }
        let saraConnor = People(name: "Sara", nick: "mama", age: 25)
        print("\(saraConnor.name) with nick \(saraConnor.nick) - \(saraConnor.age) year old.")
        print("Is adult:?", saraConnor.isAdult())
        
        class Child: People {
            var friend: String
            
            init(name: String, nick: String, age: Int, friend: String) {
                self.friend = friend
                super.init(name: name, nick: nick, age: age)
            }
            
            override func isAdult() -> Bool {
                print("Child \(name) is younger then 18")
                return false
            }
            
            func isOwnerOfTerminator() -> Bool {
                return friend == "Terminator"
            }
        }
        
        let john = Child(name: "John Connor", nick: "son", age: 10, friend: "Terminator")
        
        print("John Connor is adult?", (john.isAdult()))
        print("John Connor has owner Terminator?", (john.isOwnerOfTerminator()))
    }
    /* Sara with nick mama - 25 year old.
     Is adult:? true
     Child John Connor is younger then 18
     John Connor is adult? false
     John Connor has owner Terminator? true */
    
    static func task10b_1() {
        print("–ó–∞–¥–∞—á–∞ 10b.1: Car for RoadTripJourneyPro.")
        
        class GasStation {
            let name: String
            let isOnPath: Bool
            let city: String
            let adress: String
            let km: Double
            let coordinates: (lat: Double, lon: Double)
            let availableFuels: [String] // ‚úÖ ["–ê–ò-95", "–î–∏–∑–µ–ª—å"]
            let isCoffeeAndWarmToilet: Bool
            let isWiFi: Bool
            
            init(name: String, isOnPath: Bool, city: String, adress: String, km: Double, coordinates: (lat: Double, lon: Double),  availableFuels: [String], isCoffeeAndWarmToilet: Bool, isWiFi: Bool) {
                self.name = name
                self.isOnPath = isOnPath
                self.city = city
                self.adress = adress
                self.km = km
                self.coordinates = coordinates
                self.availableFuels = availableFuels
                self.isCoffeeAndWarmToilet = isCoffeeAndWarmToilet
                self.isWiFi = isWiFi
            }
            
            func printStationInfo() {
                print("‚õΩ \(name) - \(city)")
                print("üìç –ê–¥—Ä–µ—Å: \(adress)")
                print("üõ¢Ô∏è –¢–æ–ø–ª–∏–≤–æ: \(availableFuels.joined(separator: ", "))")
            }
            
            func amenitiesInfo() -> String {
                var amenities: [String] = []
                if isCoffeeAndWarmToilet { amenities.append("‚òï –ö–æ—Ñ–µ") }
                if isWiFi { amenities.append("üì∂ Wi-Fi") }
                return amenities.isEmpty ? "–ù–µ—Ç —É–¥–æ–±—Å—Ç–≤" : amenities.joined(separator: ", ")
            }
            
            func distanceFrom(currentKm: Double) -> Double {
                return abs(km - currentKm)
            }
            
            func isBetterThan(other: GasStation, currentKm: Double) -> Bool {
                // –°—Ä–∞–≤–Ω–∏–≤–∞–µ–º –ø–æ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏—é –∏ —É–¥–æ–±—Å—Ç–≤–∞–º
                let myDistance = distanceFrom(currentKm: currentKm)
                let otherDistance = other.distanceFrom(currentKm: currentKm)
                
                if myDistance < otherDistance { return true }
                if isCoffeeAndWarmToilet && !other.isCoffeeAndWarmToilet { return true }
                return false
            }
        }
        
        class TripCar {
            let model: String
            let volumeOfTank: Int
            let fuelType: String
            var currentFuel: Double = 0.0 // —Ç–µ–∫—É—â–∏–π —É—Ä–æ–≤–µ–Ω—å —Ç–æ–ø–ª–∏–≤–∞
            
            init(model: String, volumeOfTank: Int, fuelType: String) {
                self.model = model
                self.volumeOfTank = volumeOfTank
                self.fuelType = fuelType
            }
            
            // ‚úÖ –î–û–ë–ê–í–¨ –≠–¢–£ –§–£–ù–ö–¶–ò–Æ:
            func calculateFuelNeed(distance: Double, consumption: Double) -> Double {
                return (distance * consumption) / 100
            }
            
            func canRefuelAt(station: GasStation) -> Bool {
                return station.availableFuels.contains(fuelType)
            }
            
            func canReachStation(station: GasStation, currentLocation: Double, consumption: Double) -> Bool {
                let distanceToStation = abs(station.km - currentLocation)
                let fuelNeed = calculateFuelNeed(distance: distanceToStation, consumption: consumption)
                return fuelNeed <= currentFuel
            }
            
            func refuelInfo(station: GasStation) -> String {
                if canRefuelAt(station: station) {
                    return "‚úÖ –ú–æ–∂–Ω–æ –∑–∞–ø—Ä–∞–≤–∏—Ç—å \(fuelType) –Ω–∞ \(station.name)"
                } else {
                    return "‚ùå –ù–µ –ø–æ–¥—Ö–æ–¥–∏—Ç —Ç–æ–ø–ª–∏–≤–æ \(fuelType)"
                }
            }
        }
        
        // –¢–ï–°–¢ (–í–ù–£–¢–†–ò —Ñ—É–Ω–∫—Ü–∏–∏) - –ü–†–ê–í–ò–õ–¨–ù–´–ô –ü–û–†–Ø–î–û–ö:
        let carOfVale = TripCar(model: "Toyota Rav4", volumeOfTank: 50, fuelType: "ai95")
        let station = GasStation(name: "lukoil", isOnPath: true, city: "Achinsk",
                                 adress: "—É–ª. –õ–µ–Ω–∏–Ω–∞", km: 166.0,
                                 coordinates: (56.2810, 90.5007),
                                 availableFuels: ["ai95", "diesel"],
                                 isCoffeeAndWarmToilet: true, isWiFi: true)
        
        carOfVale.currentFuel = 20.0
        
        print("–ú–∞—à–∏–Ω–∞: Toyota Rav4 –∑–∞–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è: ai95")
        print("–ó–∞–ø—Ä–∞–≤–∫–∞: lukoil –ø—Ä–æ–¥–∞–µ—Ç: [\"ai95\", \"diesel\"]")
        
        print("üîç –ò—â—É –∑–∞–ø—Ä–∞–≤–∫—É –¥–ª—è Toyota Rav4")
        print("üìç –ù–∞–π–¥–µ–Ω–∞: lukoil –≤ –ê—á–∏–Ω—Å–∫–µ")
        print("‚úÖ –ú–æ–∂–Ω–æ –∑–∞–ø—Ä–∞–≤–∏—Ç—å ai95!")  // ‚Üê –û–î–ò–ù –∫—Ä–∞—Å–∏–≤—ã–π —Å—Ç–∞—Ç—É—Å
        
        print("üìã –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∑–∞–ø—Ä–∞–≤–∫–µ:")
        print("‚õΩ lukoil - Achinsk")
        print("üìç –ê–¥—Ä–µ—Å: —É–ª. –õ–µ–Ω–∏–Ω–∞")
        print("üõ¢Ô∏è –¢–æ–ø–ª–∏–≤–æ: ai95, diesel")
        print("üè™ –£–¥–æ–±—Å—Ç–≤–∞: ‚òï –ö–æ—Ñ–µ, üì∂ Wi-Fi")
        
        print("üìä –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:")
        print("–ù—É–∂–Ω–æ —Ç–æ–ø–ª–∏–≤–∞ –¥–æ –¢–æ–º—Å–∫–∞: 32.0 –ª")
    }
    
    /* –ó–∞–¥–∞—á–∞ 10b.1: Car for RoadTripJourneyPro.
     –ú–∞—à–∏–Ω–∞: Toyota Rav4 –∑–∞–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è: ai95
     –ó–∞–ø—Ä–∞–≤–∫–∞: lukoil –ø—Ä–æ–¥–∞–µ—Ç: ["ai95", "diesel"]
     üîç –ò—â—É –∑–∞–ø—Ä–∞–≤–∫—É –¥–ª—è Toyota Rav4
     üìç –ù–∞–π–¥–µ–Ω–∞: lukoil –≤ –ê—á–∏–Ω—Å–∫–µ
     ‚úÖ –ú–æ–∂–Ω–æ –∑–∞–ø—Ä–∞–≤–∏—Ç—å ai95!
     üìã –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∑–∞–ø—Ä–∞–≤–∫–µ:
     ‚õΩ lukoil - Achinsk
     üìç –ê–¥—Ä–µ—Å: —É–ª. –õ–µ–Ω–∏–Ω–∞
     üõ¢Ô∏è –¢–æ–ø–ª–∏–≤–æ: ai95, diesel
     üè™ –£–¥–æ–±—Å—Ç–≤–∞: ‚òï –ö–æ—Ñ–µ, üì∂ Wi-Fi
     üìä –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:
     –ù—É–∂–Ω–æ —Ç–æ–ø–ª–∏–≤–∞ –¥–æ –¢–æ–º—Å–∫–∞: 32.0 –ª. */
    
    /* –ß–¢–û –ò–°–ü–†–ê–í–õ–ï–ù–û -> –ü–†–û–§–ï–°–°–ò–û–ù–ê–õ–¨–ù–´–ô –ü–û–î–•–û–î:
     
     üöó –ú–∞—à–∏–Ω–∞ + –ó–∞–ø—Ä–∞–≤–∫–∞ ‚Üí ‚ùì –í–æ–ø—Ä–æ—Å—ã ‚Üí üìã –î–µ—Ç–∞–ª–∏ ‚Üí ‚úÖ –ò—Ç–æ–≥–∏
     
     ‚úÖ –í–æ—Å—Ö–æ–¥—è—â–∞—è –ª–æ–≥–∏–∫–∞ - –æ—Ç –æ–±—â–µ–≥–æ –∫ —á–∞—Å—Ç–Ω–æ–º—É
     
     ‚úÖ –ï—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω—ã–π –ø–æ—Ç–æ–∫ - –∫–∞–∫ –¥—É–º–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
     
     ‚úÖ –ì—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ - —Å–≤—è–∑–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –≤–º–µ—Å—Ç–µ
     
     ‚úÖ –ö–ª–∏–µ–Ω—Ç–æ–æ—Ä–∏–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ—Å—Ç—å - —É–¥–æ–±–Ω–æ –¥–ª—è —á—Ç–µ–Ω–∏—è
     
     –†–ï–ó–£–õ–¨–¢–ê–¢: —É–ª—É—á—à–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π –æ–ø—ã—Ç —Å–≤–æ–µ–≥–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è!  —É–º–µ–Ω–∏–µ –¥—É–º–∞—Ç—å "–∫–∞–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ–¥" + "–∫–∞–∫ —ç—Ç–æ –≤–æ—Å–ø—Ä–∏–º–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"üåü. */
    
    static func task10c_1() {
        print("–ó–∞–¥–∞—á–∞ 10c.1: –£–º–Ω–∞—è –ø–æ–µ–∑–¥–∫–∞ —Å –Ω–∞—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ–º üó∫Ô∏è")
        
        // –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–ª—è —Ä–∞—Å—Ö–æ–¥–æ–≤ - –ø—Ä–æ—â–µ –∏ –Ω–∞–≥–ª—è–¥–Ω–µ–µ
        struct Expense {
            let category: String
            var amount: Double
        }
        
        // –ë–∞–∑–æ–≤—ã–π –∫–ª–∞—Å—Å –ø–æ–µ–∑–¥–∫–∏
        class Trip {
            let duration: Double // –≤ —á–∞—Å–∞—Ö (—É–ø—Ä–æ—â–∞–µ–º –ª–æ–≥–∏–∫—É)
            let budget: Double
            let participants: [String]
            var expenses: [Expense]
            
            init(duration: Double, budget: Double, participants: [String], expenses: [Expense]) {
                self.duration = duration
                self.budget = budget
                self.participants = participants
                self.expenses = expenses
            }
            
            var totalExpenses: Double {
                expenses.reduce(0) { $0 + $1.amount }
            }
            
            var remainingBudget: Double {
                budget - totalExpenses
            }
            
            func printReport() {
                print("üë• –£—á–∞—Å—Ç–Ω–∏–∫–∏: \(participants.joined(separator: ", "))")
                print("‚è±Ô∏è –ü—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: \(duration) —á")
                print("üí∞ –ë—é–¥–∂–µ—Ç: \(budget) —Ä—É–±")
                print("üí∏ –†–∞—Å—Ö–æ–¥—ã: \(totalExpenses) —Ä—É–±")
                print("üìä –û—Å—Ç–∞—Ç–æ–∫: \(remainingBudget) —Ä—É–±")
            }
        }
        
        // –ù–∞—Å–ª–µ–¥–Ω–∏–∫ - —É–º–Ω–∞—è –ø–æ–µ–∑–¥–∫–∞
        class SmartTrip: Trip {
            let description: String
            let city: String
            
            init(city: String, description: String, duration: Double, budget: Double, participants: [String], expenses: [Expense]) {
                self.city = city
                self.description = description
                super.init(duration: duration, budget: budget, participants: participants, expenses: expenses)
            }
            
            override func printReport() {
                print("\nüèôÔ∏è –£–º–Ω–∞—è –ø–æ–µ–∑–¥–∫–∞ –≤ \(city)")
                print("üìù \(description)")
                super.printReport()
            }
        }
        
        // –î–ï–ú–û–ù–°–¢–†–ê–¶–ò–Ø (–∫–æ—Ä–æ—á–µ –∏ –ø–æ–Ω—è—Ç–Ω–µ–µ)
        let expenses = [
            Expense(category: "–¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç", amount: 500),
            Expense(category: "–ï–¥–∞", amount: 1500),
            Expense(category: "–ë–∏–ª–µ—Ç—ã", amount: 900)
        ]
        
        let tomskTrip = SmartTrip(
            city: "–¢–æ–º—Å–∫",
            description: "–ü—Ä–æ–≥—É–ª–∫–∞ –ø–æ —Ü–µ–Ω—Ç—Ä—É –≥–æ—Ä–æ–¥–∞ –∏ –º—É–∑–µ—è–º",
            duration: 3.0,
            budget: 5000,
            participants: ["–í–∞–ª–µ—Ä–∏—è", "–î–º–∏—Ç—Ä–∏–π"],
            expenses: expenses
        )
        
        tomskTrip.printReport()
        
        // –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —Ä–∞–∑–ª–∏—á–∏–π –∫–ª–∞—Å—Å–∞ –∏ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã
        print("\n--- –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è Class vs Struct ---")
        
        // –°—Ç—Ä—É–∫—Ç—É—Ä–∞ - value type
        let expense1 = Expense(category: "–°—É–≤–µ–Ω–∏—Ä—ã", amount: 300)
        var expense2 = expense1
        expense2.amount = 500
        
        print("Struct: expense1 = \(expense1.amount), expense2 = \(expense2.amount)")
        
        // –ö–ª–∞—Å—Å - reference type
        let trip1 = Trip(duration: 2.0, budget: 3000, participants: ["–ê"], expenses: [])
        let trip2 = trip1
        print("Class: trip1 –∏ trip2 —Å—Å—ã–ª–∞—é—Ç—Å—è –Ω–∞ –æ–¥–∏–Ω –æ–±—ä–µ–∫—Ç")
    }
    /* –ó–∞–¥–∞—á–∞ 10c.1: –£–º–Ω–∞—è –ø–æ–µ–∑–¥–∫–∞ —Å –Ω–∞—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ–º üó∫Ô∏è
     
     üèôÔ∏è –£–º–Ω–∞—è –ø–æ–µ–∑–¥–∫–∞ –≤ –¢–æ–º—Å–∫
     üìù –ü—Ä–æ–≥—É–ª–∫–∞ –ø–æ —Ü–µ–Ω—Ç—Ä—É –≥–æ—Ä–æ–¥–∞ –∏ –º—É–∑–µ—è–º
     üë• –£—á–∞—Å—Ç–Ω–∏–∫–∏: –í–∞–ª–µ—Ä–∏—è, –î–º–∏—Ç—Ä–∏–π
     ‚è±Ô∏è –ü—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: 3.0 —á
     üí∞ –ë—é–¥–∂–µ—Ç: 5000.0 —Ä—É–±
     üí∏ –†–∞—Å—Ö–æ–¥—ã: 2900.0 —Ä—É–±
     üìä –û—Å—Ç–∞—Ç–æ–∫: 2100.0 —Ä—É–±

     --- –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è Class vs Struct ---
     Struct: expense1 = 300.0, expense2 = 500.0
     Class: trip1 –∏ trip2 —Å—Å—ã–ª–∞—é—Ç—Å—è –Ω–∞ –æ–¥–∏–Ω –æ–±—ä–µ–∫—Ç  */
            
            static func task10_2() {
                print("–ó–∞–¥–∞—á–∞ 10.2: –ù–∞–ø–∏—à–∏ –∫–æ–Ω—Å–æ–ª—å–Ω–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ: —Å–æ–∑–¥–∞–π –∫–ª–∞—Å—Å 'House' –∏ –≤ –Ω–µ–º —Å–≤–æ–π—Å—Ç–≤–∞ 'width' + 'height' –∏ –º–µ—Ç–æ–¥—ã: 'build'(width * height), getWidth + getHeight (–≤—ã–≤–æ–¥ –Ω–∞ —ç–∫—Ä–∞–Ω).")
                class House {
                    let width: Int
                    let height: Int
                    
                    init(width: Int, height: Int) {
                        self.width = width
                        self.height = height
                    }
                    func build() -> String {
                        let square = self.width * self.height
                        return "–ü–ª–æ—â–∞–¥—å –¥–æ–º–∞: \(square)"
                    }
                    func getWidth() -> String {
                        return "–®–∏—Ä–∏–Ω–∞ –¥–æ–º–∞: \(width)"
                    }
                    func getHeight() -> String  {
                        return "–í—ã—Å–æ—Ç–∞ –¥–æ–º–∞: \(height)"
                    }
                }
                // —Ç–µ—Å—Ç—ã
                let myHouse = House(width: 12, height: 21)
                let square = myHouse.build()
                print(square)
                print(myHouse.getWidth())
                print(myHouse.getHeight())
            }
    /* –ó–∞–¥–∞—á–∞ 10.2: –ù–∞–ø–∏—à–∏ –∫–æ–Ω—Å–æ–ª—å–Ω–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ: —Å–æ–∑–¥–∞–π –∫–ª–∞—Å—Å 'House' –∏ –≤ –Ω–µ–º —Å–≤–æ–π—Å—Ç–≤–∞ 'width' + 'height' –∏ –º–µ—Ç–æ–¥—ã: 'build'(width * height), getWidth + getHeight (–≤—ã–≤–æ–¥ –Ω–∞ —ç–∫—Ä–∞–Ω).
     –ü–ª–æ—â–∞–¥—å –¥–æ–º–∞: 252
     –®–∏—Ä–∏–Ω–∞ –¥–æ–º–∞: 12
     –í—ã—Å–æ—Ç–∞ –¥–æ–º–∞: 21 */
    
            static func task10_3() {
                print("–ó–∞–¥–∞—á–∞ 10.3: –°–æ–∑–¥–∞–π –∫–ª–∞—Å—Å —Å –º–∞—Å—Å–∏–≤–æ–º –∏–º–µ–Ω. –ù–∞–ø–∏—à–∏ –º–µ—Ç–æ–¥, –∫–æ—Ç–æ—Ä—ã–π –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –±—É–∫–≤—É –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∏–º–µ–Ω–∞, –Ω–∞—á–∏–Ω–∞—é—â–∏–µ—Å—è –Ω–∞ —ç—Ç—É –±—É–∫–≤—É. –ù–∞–ø–∏—à–∏ –≤—Ç–æ—Ä–æ–π –º–µ—Ç–æ–¥, –∫–æ—Ç–æ—Ä—ã–π –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –º–∞—Å—Å–∏–≤ —Å—Ç—Ä–æ–∫ –∏ –ø–µ—á–∞—Ç–∞–µ—Ç –∫–∞–∂–¥–æ–µ –∏–º—è —Å –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–∏. –ü—Ä–æ—Ç–µ—Å—Ç–∏—Ä—É–π: –æ—Ç—Ñ–∏–ª—å—Ç—Ä—É–π –∏–º–µ–Ω–∞ –Ω–∞ –±—É–∫–≤—É '–ê' –∏ —Ä–∞—Å–ø–µ—á–∞—Ç–∞–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç.")
                
            let names = ["Boris", "Sam", "Adam", "Arnold", "Bob", "Alex", "Andrew"]
                
                class Person {
                    let names: [String]
                    
                    init(names: [String]) {
                        self.names = names
                    }
                    func filter(by letter: String) -> [String] {
                        return self.names.filter { $0.hasPrefix(letter) }
                    }
                    
                    func printNames(_ names: [String]) {
                        names.forEach { print($0) }
                        }
                    }
                
                let person = Person(names: names)
                let arrayNamesFromA = person.filter(by: "A")

                print("–û—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã–µ –∏–º–µ–Ω–∞: \(arrayNamesFromA)")
                print("\n–ò–º–µ–Ω–∞ —Å –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–∏:")
                person.printNames(arrayNamesFromA)
   }
    /* –ó–∞–¥–∞—á–∞ 10.3: –°–æ–∑–¥–∞–π –∫–ª–∞—Å—Å —Å –º–∞—Å—Å–∏–≤–æ–º –∏–º–µ–Ω. –ù–∞–ø–∏—à–∏ –º–µ—Ç–æ–¥, –∫–æ—Ç–æ—Ä—ã–π –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –±—É–∫–≤—É –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∏–º–µ–Ω–∞, –Ω–∞—á–∏–Ω–∞—é—â–∏–µ—Å—è –Ω–∞ —ç—Ç—É –±—É–∫–≤—É. –ù–∞–ø–∏—à–∏ –≤—Ç–æ—Ä–æ–π –º–µ—Ç–æ–¥, –∫–æ—Ç–æ—Ä—ã–π –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –º–∞—Å—Å–∏–≤ —Å—Ç—Ä–æ–∫ –∏ –ø–µ—á–∞—Ç–∞–µ—Ç –∫–∞–∂–¥–æ–µ –∏–º—è —Å –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–∏. –ü—Ä–æ—Ç–µ—Å—Ç–∏—Ä—É–π: –æ—Ç—Ñ–∏–ª—å—Ç—Ä—É–π –∏–º–µ–Ω–∞ –Ω–∞ –±—É–∫–≤—É '–ê' –∏ —Ä–∞—Å–ø–µ—á–∞—Ç–∞–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç.
     –û—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã–µ –∏–º–µ–Ω–∞: ["Adam", "Arnold", "Alex", "Andrew"]

     –ò–º–µ–Ω–∞ —Å –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–∏:
     Adam
     Arnold
     Alex
     Andrew */
    
    static func task10_4() {
        print("–ó–∞–¥–∞—á–∞ 10.4: –Ω–∞–ø–∏—à–∏ –∫–ª–∞—Å—Å, –∫–æ—Ç–æ—Ä—ã–π —Ñ–æ—Ä–º–∏—Ä—É–µ—Ç –º–∞—Å—Å–∏–≤ —É—á–µ–Ω–∏–∫–æ–≤, —Å–æ—Ä—Ç–∏—Ä—É–µ—Ç –∏ —Å—á–∏—Ç–∞–µ—Ç –∏—Ö –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ. –ï—Å–ª–∏ —É—á–µ–Ω–∏–∫–æ–≤ > 12, –≤—ã–≤–µ–¥–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ '–≤ —à–∫–æ–ª–µ –Ω–µ—Ç –º–µ—Å—Ç'.")
        
        let arraySchoolChildren = [
            "Sam", "Ann", "Tod", "Sara", "Bob",
            "Boris", "Endy", "Kate", "Bruce", "Arny", "Stive", "Lisa", "Felix", "Dennis"
        ]
        
        class Schoolchild {
            let names: [String]
            let quantity: Int
            
            init(names: [String]) {
                self.names = names
                self.quantity = names.count
            }
            func sorted() -> [String] {
                return names.sorted()
            }
            func calc() -> Int {
                return names.count
            }
            func isMoreThen12() -> String {
                if quantity > 12 {
                    return "No places in school"
                } else {
                    return "There are places in school"
                }
            }
        }
        print("–ò—Å—Ö–æ–¥–Ω—ã–π –º–∞—Å—Å–∏–≤: \(arraySchoolChildren)")
        
        let children = Schoolchild(names: arraySchoolChildren)
        print("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—á–µ–Ω–∏–∫–æ–≤: \(children.quantity)")
        print("–ü—Ä–æ–≤–µ—Ä–∫–∞ –º–µ—Å—Ç: \(children.isMoreThen12())")
        print("–û—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫: \(children.sorted())")
    }
    static func task10a_4() {
        print("–ó–∞–¥–∞—á–∞ 10a.4: –Ω–∞–ø–∏—à–∏ –∫–ª–∞—Å—Å, –∫–æ—Ç–æ—Ä—ã–π —Ñ–æ—Ä–º–∏—Ä—É–µ—Ç –º–∞—Å—Å–∏–≤ —É—á–µ–Ω–∏–∫–æ–≤, —Å–æ—Ä—Ç–∏—Ä—É–µ—Ç –∏ —Å—á–∏—Ç–∞–µ—Ç –∏—Ö –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ. –ï—Å–ª–∏ —É—á–µ–Ω–∏–∫–æ–≤ > 12, –≤—ã–≤–µ–¥–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ '–≤ —à–∫–æ–ª–µ –Ω–µ—Ç –º–µ—Å—Ç'.")
        
        let arraySchoolChildren = [
            "Sam", "Ann", "Tod", "Sara", "Bob",
            "Boris", "Endy", "Kate", "Bruce", "Arny", "Stive", "Lisa", "Felix", "Dennis"
        ]
        
        class School {
            
            private var students: [String] // –û–±—ä—è–≤–ª–µ–Ω–∏–µ —Å–≤–æ–π—Å—Ç–≤–∞ - –º–∞—Å—Å–∏–≤ —É—á–µ–Ω–∏–∫–æ–≤, private - –¥–æ—Å—Ç—É–ø —Ç–æ–ª—å–∫–æ –≤–Ω—É—Ç—Ä–∏ –∫–ª–∞—Å—Å–∞ (–∏–Ω–∫–∞–ø—Å—É–ª—è—Ü–∏—è)
            
            init(students: [String]) { // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ç–æ—Ä - –≤—ã–∑—ã–≤–∞–µ—Ç—Å—è –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –æ–±—ä–µ–∫—Ç–∞, students: [String] - –ø–∞—Ä–∞–º–µ—Ç—Ä (–º–∞—Å—Å–∏–≤ —Å—Ç—Ä–æ–∫)
                
                self.students = students // self.students - —Å–≤–æ–π—Å—Ç–≤–æ –∫–ª–∞—Å—Å–∞, students - –ø–∞—Ä–∞–º–µ—Ç—Ä –º–µ—Ç–æ–¥–∞, –ü—Ä–∏—Å–≤–∞–∏–≤–∞–µ–º –ø–µ—Ä–µ–¥–∞–Ω–Ω—ã–π –º–∞—Å—Å–∏–≤ —Å–≤–æ–π—Å—Ç–≤—É –∫–ª–∞—Å—Å–∞//
            }
            
            var sortedStudents: [String] { // –í—ã—á–∏—Å–ª—è–µ–º–æ–µ —Å–≤–æ–π—Å—Ç–≤–æ (computed property), –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –º–∞—Å—Å–∏–≤ —É—á–µ–Ω–∏–∫–æ–≤
                return students.sorted() // sorted() - –≤—Å—Ç—Ä–æ–µ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏
            }
            
            var studentCount: Int {  // –í—ã—á–∏—Å–ª—è–µ–º–æ–µ —Å–≤–æ–π—Å—Ç–≤–æ –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—á–µ–Ω–∏–∫–æ–≤
                return students.count // count - —Å–≤–æ–π—Å—Ç–≤–æ –º–∞—Å—Å–∏–≤–∞, –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —á–∏—Å–ª–æ —ç–ª–µ–º–µ–Ω—Ç–æ–≤
            }
            
            var hasAvailablePlaces: Bool { // –í—ã—á–∏—Å–ª—è–µ–º–æ–µ —Å–≤–æ–π—Å—Ç–≤–æ —Ç–∏–ø–∞ Bool (true/false), –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –µ—Å—Ç—å –ª–∏ —Å–≤–æ–±–æ–¥–Ω—ã–µ –º–µ—Å—Ç–∞
                return studentCount <= 12
            }
            
            func checkAvailability() -> String { // –ú–µ—Ç–æ–¥ (—Ñ—É–Ω–∫—Ü–∏—è –∫–ª–∞—Å—Å–∞)
                // –¢–µ—Ä–Ω–∞—Ä–Ω—ã–π –æ–ø–µ—Ä–∞—Ç–æ—Ä: —É—Å–ª–æ–≤–∏–µ ? –∑–Ω–∞—á–µ–Ω–∏–µ_–µ—Å–ª–∏_true : –∑–Ω–∞—á–µ–Ω–∏–µ_–µ—Å–ª–∏_false
                return hasAvailablePlaces ? "There are places in school" : "No places in school"
            } // –ï—Å–ª–∏ hasAvailablePlaces == true - –≤–µ—Ä–Ω–µ—Ç –ø–µ—Ä–≤—É—é —Å—Ç—Ä–æ–∫—É, –∏–Ω–∞—á–µ –≤—Ç–æ—Ä—É—é
        }
        // –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –∫–ª–∞—Å—Å–∞:
        
        // –°–æ–∑–¥–∞–Ω–∏–µ –æ–±—ä–µ–∫—Ç–∞ (—ç–∫–∑–µ–º–ø–ª—è—Ä–∞ –∫–ª–∞—Å—Å–∞)
        // students: - –∏–º—è –ø–∞—Ä–∞–º–µ—Ç—Ä–∞, arraySchoolChildren - –ø–µ—Ä–µ–¥–∞–≤–∞–µ–º—ã–π –º–∞—Å—Å–∏–≤
        let school = School(students: arraySchoolChildren)
        
        // –û–±—Ä–∞—â–µ–Ω–∏–µ –∫ –≤—ã—á–∏—Å–ª—è–µ–º—ã–º —Å–≤–æ–π—Å—Ç–≤–∞–º (–æ–Ω–∏ –≤—ã—á–∏—Å–ª—è—é—Ç—Å—è –≤ –º–æ–º–µ–Ω—Ç –æ–±—Ä–∞—â–µ–Ω–∏—è)
        print("–û—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫: \(school.sortedStudents)")
        // sortedStudents –≤—ã–∑—ã–≤–∞–µ—Ç –∑–∞–º—ã–∫–∞–Ω–∏–µ { return students.sorted() }
        
        print("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—á–µ–Ω–∏–∫–æ–≤: \(school.studentCount)")
        // studentCount –≤—ã–∑—ã–≤–∞–µ—Ç { return students.count }
        
        // –í—ã–∑–æ–≤ –º–µ—Ç–æ–¥–∞
        print(school.checkAvailability())
        // checkAvailability() –ø—Ä–æ–≤–µ—Ä—è–µ—Ç hasAvailablePlaces –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â—É—é —Å—Ç—Ä–æ–∫—É
        
        /* –ó–∞–¥–∞—á–∞ 10a.4: –Ω–∞–ø–∏—à–∏ –∫–ª–∞—Å—Å, –∫–æ—Ç–æ—Ä—ã–π —Ñ–æ—Ä–º–∏—Ä—É–µ—Ç –º–∞—Å—Å–∏–≤ —É—á–µ–Ω–∏–∫–æ–≤, —Å–æ—Ä—Ç–∏—Ä—É–µ—Ç –∏ —Å—á–∏—Ç–∞–µ—Ç –∏—Ö –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ. –ï—Å–ª–∏ —É—á–µ–Ω–∏–∫–æ–≤ > 12, –≤—ã–≤–µ–¥–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ '–≤ —à–∫–æ–ª–µ –Ω–µ—Ç –º–µ—Å—Ç'.
         –û—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫: ["Ann", "Arny", "Bob", "Boris", "Bruce", "Dennis", "Endy", "Felix", "Kate", "Lisa", "Sam", "Sara", "Stive", "Tod"]
         –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—á–µ–Ω–∏–∫–æ–≤: 14
         No places in school  */
        
        /* –ö–ª—é—á–µ–≤—ã–µ –º–æ–º–µ–Ω—Ç—ã –ª–æ–≥–∏–∫–∏:
         
         –ò–Ω–∫–∞–ø—Å—É–ª—è—Ü–∏—è - –¥–∞–Ω–Ω—ã–µ –∑–∞—â–∏—â–µ–Ω—ã –º–æ–¥–∏—Ñ–∏–∫–∞—Ç–æ—Ä–æ–º private
         –í—ã—á–∏—Å–ª—è–µ–º—ã–µ —Å–≤–æ–π—Å—Ç–≤–∞ - –Ω–µ —Ö—Ä–∞–Ω—è—Ç –∑–Ω–∞—á–µ–Ω–∏—è, –∞ –≤—ã—á–∏—Å–ª—è—é—Ç –∏—Ö –ø—Ä–∏ –∫–∞–∂–¥–æ–º –æ–±—Ä–∞—â–µ–Ω–∏–∏
         –†–∞–∑–¥–µ–ª–µ–Ω–∏–µ –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç–∏ - –∫–∞–∂–¥–æ–µ —Å–≤–æ–π—Å—Ç–≤–æ/–º–µ—Ç–æ–¥ —Ä–µ—à–∞–µ—Ç –æ–¥–Ω—É –∑–∞–¥–∞—á—É
         –ß–∏—Å—Ç–æ—Ç–∞ –∫–æ–¥–∞ - –Ω–µ—Ç –ª–∏—à–Ω–∏—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –≤ –º–µ—Ç–æ–¥–∞—Ö, –ª–æ–≥–∏–∫–∞ —è—Å–Ω–∞ */
    }
    
    static func task10b_4() {
        print("–ó–∞–¥–∞—á–∞ 10b.4: –∏—Å–ø–æ–ª—å–∑—É–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π —Å—Ç–∏–ª—å –±–µ–∑ —Å–æ–∑–¥–∞–Ω–∏—è –∫–ª–∞—Å—Å–∞/—Å—Ç—Ä—É–∫—Ç—É—Ä—ã  -> –ø—Ä–æ—Å—Ç–æ –æ–±—Ä–∞–±–æ—Ç–∞–π –º–∞—Å—Å–∏–≤")
        
        func checkSchool(students: [String]) -> (sorted: [String], count: Int, availabilityMessage: String) {
            let sortedStudents = students.sorted()
            let count = students.count
            let message = count <= 12 ? "There are places in school" : "No places in school"
            return (sortedStudents, count, message)
        }

        let result = checkSchool(students: ["–ò–≤–∞–Ω", "–ú–∞—Ä–∏—è", "–ï–ª–µ–Ω–∞"])
        print(result.sorted)
        print(result.count)
        print(result.availabilityMessage)
        
        /* –ó–∞–¥–∞—á–∞ 10b.4: –∏—Å–ø–æ–ª—å–∑—É–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π —Å—Ç–∏–ª—å –±–µ–∑ —Å–æ–∑–¥–∞–Ω–∏—è –∫–ª–∞—Å—Å–∞/—Å—Ç—Ä—É–∫—Ç—É—Ä—ã  -> –ø—Ä–æ—Å—Ç–æ –æ–±—Ä–∞–±–æ—Ç–∞–π –º–∞—Å—Å–∏–≤
         ["–ï–ª–µ–Ω–∞", "–ò–≤–∞–Ω", "–ú–∞—Ä–∏—è"]
         3
         There are places in school */
    }
    
    static func task10—Å_4() {
        print("–ó–∞–¥–∞—á–∞ 10c.4 –î–ª—è –ø—Ä–æ—Å—Ç–æ–π –∑–∞–¥–∞—á–∏ —Ö—Ä–∞–Ω–µ–Ω–∏—è –∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –º–∞—Å—Å–∏–≤–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ —á–µ—Ä–µ–∑ struct ‚Äî –±–æ–ª–µ–µ ‚Äú—Å–≤–∏—Ç—Ñ—Ç–æ–≤—ã–π‚Äù —Å–ø–æ—Å–æ–± –∏ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–µ–µ —Å —Ç–æ—á–∫–∏ –∑—Ä–µ–Ω–∏—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–∞–º—è—Ç—å—é.")
        
        struct School {
            private var students: [String]
            
            // –Ø–≤–Ω—ã–π –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ç–æ—Ä —Å –¥–æ—Å—Ç—É–ø–æ–º internal (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é)
            init(students: [String]) {
                self.students = students
            }
            
            var sortedStudents: [String] {
                students.sorted()
            }
            
            var studentCount: Int {
                students.count
            }
            
            var hasAvailablePlaces: Bool {
                studentCount <= 12
            }
            
            func checkAvailability() -> String {
                hasAvailablePlaces ? "There are places in school" : "No places in school"
            }
        }
        
        // –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:
        let school = School(students: ["–ò–≤–∞–Ω", "–ú–∞—Ä–∏—è", "–ï–ª–µ–Ω–∞"])
        print(school.sortedStudents)
        print(school.studentCount)
        print(school.checkAvailability())
        
        /* –ó–∞–¥–∞—á–∞ 10c.4 –î–ª—è –ø—Ä–æ—Å—Ç–æ–π –∑–∞–¥–∞—á–∏ —Ö—Ä–∞–Ω–µ–Ω–∏—è –∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –º–∞—Å—Å–∏–≤–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ —á–µ—Ä–µ–∑ struct ‚Äî –±–æ–ª–µ–µ ‚Äú—Å–≤–∏—Ç—Ñ—Ç–æ–≤—ã–π‚Äù —Å–ø–æ—Å–æ–± –∏ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–µ–µ —Å —Ç–æ—á–∫–∏ –∑—Ä–µ–Ω–∏—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–∞–º—è—Ç—å—é.
         ["–ï–ª–µ–Ω–∞", "–ò–≤–∞–Ω", "–ú–∞—Ä–∏—è"]
         3
         There are places in school */
    }
    
    static func task10e_5() {
        print("–ó–∞–¥–∞—á–∞ 10a.5: —Å–æ–∑–¥–∞–π 12 —Å–≤–æ–∏—Ö —Å—Ç—Ä—É–∫—Ç—É—Ä")
        
        struct Car { // srtuct 1
            let name: String
            let color: String
            let tank: Int
            let year: Int
            private var fuel: String // —á–∞—Å—Ç–Ω–æ–µ —Å–≤–æ–π—Å—Ç–≤–æ - —Ç–æ–ø–ª–∏–≤–æ
            let hasSpareWheel: Bool
            let hasSunroof: Bool
            
            init(name: String, color: String, tank: Int, year: Int, fuel: String, hasSpareWheel: Bool = true, hasSunroof: Bool = false) {
                   self.name = name
                   self.color = color
                   self.tank = tank
                   self.year = year
                   self.fuel = fuel
                   self.hasSpareWheel = hasSpareWheel
                   self.hasSunroof = hasSunroof
               }
            
            var age: Int {
                Calendar.current.component(.year, from: Date()) - year
            }
            
            var description: String { // –∫–∞—Å—Ç–æ–º–Ω—ã–π —Å–∫—Ä—ã–≤–∞–µ—Ç –ø—Ä–∏–≤–∞—Ç–Ω—ã–µ —Å–≤–æ–π—Å—Ç–≤–∞
                return "Car(name: \(name), color: \(color))" // fuel –Ω–∞–º–µ—Ä–µ–Ω–Ω–æ –ù–ï –≤–∫–ª—é—á–∞–µ–º - –∏–Ω–∫–∞–ø—Å—É–ª—è—Ü–∏—è! –ù–ï–õ–¨–ó–Ø –∏–∑–º–µ–Ω–∏—Ç—å –ò–ó–í–ù–ï!!!
            }
                func isDiesel() -> Bool {
                    return fuel.lowercased().contains("diesel")
                }
            }
        let myCar = Car(name: "Toyota Rav4", color: "silver", tank: 50, year: 2015, fuel: "petrol AI-95")
        print(myCar)
        print("My car is old:", (myCar.age))
        print(myCar.description)
        
        /* –ó–∞–¥–∞—á–∞ 10.5: —Å–æ–∑–¥–∞–π 12 —Å–≤–æ–∏—Ö —Å—Ç—Ä—É–∫—Ç—É—Ä
         Car(name: "Toyota Rav4", color: "silver", tank: 50, year: 2015, fuel: "petrol AI-95", hasSpareWheel: true, hasSunroof: false)
         My car is old: 10
         Car(name: Toyota Rav4, color: silver) */
    }
    
    static func task10a_5() {
        print("–ó–∞–¥–∞—á–∞ 10a.5: –£—Ä–æ–≤–µ–Ω—å 1. Data Object - only property")
        
        struct Address {
            let street: String
            let city: String
        }
            
        let myAddress = Address(street: "Komarova", city: "Krasnoyarsk")
        print(myAddress)
        
    }
    
    static func task10b_5() {
        print("–ó–∞–¥–∞—á–∞ 10b.5: –£—Ä–æ–≤–µ–Ω—å 2 Static Config - —Å—Ç–∞—Ç–∏—Å—Ç–∏—á–µ—Å–∫–∏–µ —Å–≤–æ–π—Å—Ç–≤–∞")
        
        struct Parcel {
            
            static let maxWeight = 20
            static let carrierCompany = "Post Office"
            static let tariff = ["express", "domestic", "interenational", "airmail", "standart"]
        }
        print(Parcel.maxWeight)        // 20
        print(Parcel.carrierCompany)   // "Post Office"
        print(Parcel.tariff[0])        // "express"
    }
    
    static func task10c_5() {
        print("–ó–∞–¥–∞—á–∞ 10c.5:  Struct with Computed Properties - '–≤—ã—á–∏—Å–ª—è–µ–º—ã–µ —Å–≤–æ–π—Å—Ç–≤–∞'.")
        
        struct Rectangle {
            let width: Int
            let length: Int
            
            init(width: Int, length: Int) {
                self.width = width
                self.length = length
            }
            
            var perimeter: Int {
                return 2 * (width + length)
            }
            
            var square: Int {
                return width * length
            }
        }
        let myRectangle = Rectangle(width: 4, length: 7)
        print("–ü—Ä—è–º–æ—É–≥–æ–ª—å–Ω–∏–∫:", (myRectangle))
        print("–ü–µ—Ä–∏–º–µ—Ç—Ä –ø—Ä—è—Ç–æ—É–≥–æ–ª—å–Ω–∏–∫–∞: ", (myRectangle.perimeter))
        print("–ü–ª–æ—â–∞–¥—å –ø—Ä—è–º–æ—É–≥–æ–ª—å–Ω–∏–∫–∞: ", (myRectangle.square))
    }
    /* –ó–∞–¥–∞—á–∞ 10c.5:  Struct with Computed Properties - '–≤—ã—á–∏—Å–ª—è–µ–º—ã–µ —Å–≤–æ–π—Å—Ç–≤–∞'.
     –ü—Ä—è–º–æ—É–≥–æ–ª—å–Ω–∏–∫: Rectangle(width: 4, length: 7)
     –ü–µ—Ä–∏–º–µ—Ç—Ä –ø—Ä—è—Ç–æ—É–≥–æ–ª—å–Ω–∏–∫–∞:  22
     –ü–ª–æ—â–∞–¥—å –ø—Ä—è–º–æ—É–≥–æ–ª—å–Ω–∏–∫–∞:  28 */
    
    static func task10d_5() {
        print("–ó–∞–¥–∞—á–∞ 10d.5: –£—Ä–æ–≤–µ–Ω—å 4 - Multiple Computed (–Ω–µ—Å–∫–æ–ª—å–∫–æ –≤—ã—á–∏—Å–ª—è–µ–º—ã—Ö —Å–≤–æ–π—Å—Ç–≤.")
        
        enum RoadType {
            case highway, city, country
        }
        
        struct fuelConsumption {
            let distance: Double
            let fuelConsumption: Double
            let fuelPrice: Double
            let roadType: RoadType
            
            init(distance: Double, fuelConsumption: Double, fuelPrice: Double, roadType: RoadType) {
                self.distance = distance
                self.fuelConsumption = fuelConsumption
                self.fuelPrice = fuelPrice
                self.roadType = roadType
            }
            
            var averageSpeed: Double {
                switch roadType {
                case .highway: return 90
                case .city: return 60
                case .country: return 70
                }
            }
            
            var totalFuel: Double {
               let fuelNeeded = (distance / 100) * fuelConsumption
                return fuelNeeded * fuelPrice
            }
            
            var costTravel: Double {
                return (totalFuel * 2 * 100).rounded() / 100 // –∏ –æ–±—Ä–∞—Ç–Ω–æ!
            }
            
            var timeTravel: Double {
                return distance / averageSpeed
            }
        }
        let trip = fuelConsumption(
            distance: 585.0,
            fuelConsumption: 8.5,
            fuelPrice: 65.5,
            roadType: .highway)
        
        print("–í—Ä–µ–º—è –≤ –ø—É—Ç–∏: \(trip.timeTravel) —á–∞—Å–æ–≤.")
        print("–°—Ç–æ–∏–º–æ—Å—Ç—å –ø–æ–µ–∑–¥–∫–∏ —Ç—É–¥–∞ –∏ –æ–±—Ä–∞—Ç–Ω–æ: \(trip.costTravel) —Ä—É–±–ª–µ–π.")
        print(String(format: "–°—Ç–æ–∏–º–æ—Å—Ç—å –ø–æ–µ–∑–¥–∫–∏ —Ç—É–¥–∞ –∏ –æ–±—Ä–∞—Ç–Ω–æ:: %.2f —Ä—É–±–ª–µ–π", trip.costTravel))
    }
    /* –ó–∞–¥–∞—á–∞ 10d.5: –£—Ä–æ–≤–µ–Ω—å 4 - Multiple Computed (–Ω–µ—Å–∫–æ–ª—å–∫–æ –≤—ã—á–∏—Å–ª—è–µ–º—ã—Ö —Å–≤–æ–π—Å—Ç–≤.
     –í—Ä–µ–º—è –≤ –ø—É—Ç–∏: 6.5 —á–∞—Å–æ–≤.
     –°—Ç–æ–∏–º–æ—Å—Ç—å –ø–æ–µ–∑–¥–∫–∏ —Ç—É–¥–∞ –∏ –æ–±—Ä–∞—Ç–Ω–æ: 6513.98 —Ä—É–±–ª–µ–π.
     –°—Ç–æ–∏–º–æ—Å—Ç—å –ø–æ–µ–∑–¥–∫–∏ —Ç—É–¥–∞ –∏ –æ–±—Ä–∞—Ç–Ω–æ:: 6513.98 —Ä—É–±–ª–µ–π  */
    
    static func task10f_5() {
        print("–ó–∞–¥–∞—á–∞ 10f.5: —Å–æ–∑–¥–∞–π 12 —Å–≤–æ–∏—Ö —Å—Ç—Ä—É–∫—Ç—É—Ä")
    }
    static func task10g_5() {
        print("–ó–∞–¥–∞—á–∞ 10g.5: —Å–æ–∑–¥–∞–π 12 —Å–≤–æ–∏—Ö —Å—Ç—Ä—É–∫—Ç—É—Ä")
    }
    static func task10h_5() {
        print("–ó–∞–¥–∞—á–∞ 10h.5: —Å–æ–∑–¥–∞–π 12 —Å–≤–æ–∏—Ö —Å—Ç—Ä—É–∫—Ç—É—Ä")
    }
    
    static func task10_6() {
        print("–ó–∞–¥–∞—á–∞ 10.6: —Å–¥–µ–ª–∞–π —Å–ø–∏—Å–æ–∫ –ø–æ–∫—É–ø–æ–∫. –ü—Ä–æ–≥—Ä–∞–º–º–∞ –∑–∞–ø–∏—Å—ã–≤–∞–µ—Ç –ø—Ä–æ–¥—É–∫—Ç—ã –≤ –º–∞—Å—Å–∏–≤. –ï—Å–ª–∏ –≤—ã–∑—ã–≤–∞–µ–º –æ—Ä–ø–µ–¥–µ–ª–µ–Ω–Ω—ã–π –ø—Ä–æ–¥—É–∫—Ç - –≤ –∫–æ–Ω—Å–æ–ª–∏ –ø–∏—à–µ–º: '–ú–µ–¥ - –∫—É–ø–ª–µ–Ω–æ!'.")
    }
}
    
  
