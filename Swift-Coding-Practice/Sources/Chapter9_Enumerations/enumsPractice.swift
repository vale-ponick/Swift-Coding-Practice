//
//  enumsPractice.swift
//  Swift-Coding-Practice
//
//  Created by –í–∞–ª–µ—Ä–∏—è –ü–æ–Ω–æ–º–∞—Ä–µ–≤–∞ on 13.10.2025.
//

import Foundation

public struct Chapter9_Enumerations {
    public static func runAllTasks() {
        print("=== –ì–ª–∞–≤–∞ 9: –ü–µ—Ä–µ—á–∏—Å–ª–µ–Ω–∏—è ===")
        
        task9_1()
        task9_2()
        task9_2a()
        task9_2b()
        task9_2c()
        task9_2d()
        task9_2e()
        task9_2f()
        task9_2g()
        task9_3()
        task9_4()
    }
    
    static func task9_1() {
        print("–ó–∞–¥–∞—á–∞ 9.1: –ù–∞–ø–∏—à–∏, –∫–∞–∫ –ø–æ–Ω–∏–º–∞–µ—à—å –ø–µ—Ä–µ—á–∏—Å–ª–µ–Ω–∏—è: —á—Ç–æ —ç—Ç–æ —Ç–∞–∫–æ–µ, –≤ —á–µ–º –∏—Ö —Å–º—ã—Å–ª, –∑–∞—á–µ–º –Ω—É–∂–Ω—ã? –ö–∞–∫ –∏ –≥–¥–µ –∏—Ö –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å?")
    }
    static func task9_2() {
        print("–ó–∞–¥–∞—á–∞ 9.2: –ù–∞–ø–∏—à–∏ 5-10 enum —Ä–∞–∑–Ω—ã—Ö —Ç–∏–ø–æ–≤ + —Å–æ–∑–¥–∞–π –∫–∞–∫ –º–æ–∂–Ω–æ –±–æ–ª—å—à–µ —Å–≤–æ–∏—Ö enums. –ì–ª–∞–≤–Ω–æ–µ: —Å–æ–±–ª—é–¥–∞–π –ø—Ä–∞–≤–∏–ª–∞ –Ω–∞–ø–∏—Å–∞–Ω–∏—è - –ø–æ–Ω—è—Ç–Ω–æ—Å—Ç—å + –ó–ê–≥–ª–∞–≤–Ω–∞—è –±—É–∫–≤–∞ –≤ –Ω–∞—á–∞–ª–µ –Ω–∞–∑–≤–∞–Ω–∏—è. –ü—Ä–æ–ø—É—Å—Ç–∏ —á–µ—Ä–µ–∑ switch –∏ —Ä–∞—Å–ø–µ—á–∞—Ç–∞–π.")
    }
    
static func task9_2a() {
    print("–ó–∞–¥–∞—á–∞ 9.2a: –°–æ–∑–¥–∞–π enum –¥–ª—è –¥–Ω–µ–π –Ω–µ–¥–µ–ª–∏ –∏ —Ñ—É–Ω–∫—Ü–∏—é, –∫–æ—Ç–æ—Ä–∞—è –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –¥–µ–Ω—å –≤—ã—Ö–æ–¥–Ω—ã–º?")

    enum Weekday {
        case monday
        case tuesday
        case wednesday
        case thursday
        case friday
        case saturday
        case sunday
    }
    func isWeekend(day: Weekday) -> Bool {
        switch day {
        case .saturday, .sunday:
            return true
        default:
            return false
        }
    }
    // –ø—Ä–æ—Ç–µ—Å—Ç–∏—Ä—É–µ–º –¥–Ω–∏ –Ω–µ–¥–µ–ª–∏
    let days: [Weekday] = [.monday, .tuesday, .wednesday, .thursday, .friday, .saturday, .sunday]

    for day in days {
        print("\(day) - –≤—ã—Ö–æ–¥–Ω–æ–π: \(isWeekend(day: day))")
    }
    /*  monday - –≤—ã—Ö–æ–¥–Ω–æ–π: false
        tuesday - –≤—ã—Ö–æ–¥–Ω–æ–π: false
        wednesday - –≤—ã—Ö–æ–¥–Ω–æ–π: false
        thursday - –≤—ã—Ö–æ–¥–Ω–æ–π: false
        friday - –≤—ã—Ö–æ–¥–Ω–æ–π: false
        saturday - –≤—ã—Ö–æ–¥–Ω–æ–π: true
        sunday - –≤—ã—Ö–æ–¥–Ω–æ–π: true    */
}
    
    static func task9_2b() {
        print("–ó–∞–¥–∞—á–∞ 9.2b: –°–æ–∑–¥–∞–π enum –¥–ª—è –æ—Å–Ω–æ–≤–Ω—ã—Ö —Ü–≤–µ—Ç–æ–≤ –∏ —Ñ—É–Ω–∫—Ü–∏—é, –∫–æ—Ç–æ—Ä–∞—è –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç HEX-–∫–æ–¥ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ü–≤–µ—Ç–∞")
        enum Color {
            case red
            case green
            case white
            case orange
            case blue
        }
        func getHexCode(color: Color) -> String {
            switch color {
            case .red:
                return "#FF0000"
            case .green:
                return "#00FF00"
            case .white:
                return "#FFFFFF"
            case .orange:
                return "#FFA500"
            case .blue:
                return "#0000FF"
            }
        }
        // –ø—Ä–æ—Ç–µ—Å—Ç–∏—Ä—É–µ–º —Ü–≤–µ—Ç–∞
        let colors: [Color] = [.red, .green, .white, .orange, .blue]
        
        for color in colors {
            let emoji: String
            switch color {
            case .red: emoji = "üî¥"
            case .green: emoji = "üü¢"
            case .white: emoji = "‚ö™"
            case .orange: emoji = "üçä"
            case .blue: emoji = "üîµ"
            }
            print("\(emoji) \(color) - HEX: \(getHexCode(color: color))")
        }
    } /* üî¥ red - HEX: #FF0000
       üü¢ green - HEX: #00FF00
       ‚ö™ white - HEX: #FFFFFF
       üçä orange - HEX: #FFA500
       üîµ blue - HEX: #0000FF   */
    
    static func task9_2c() {
        print("–ó–∞–¥–∞—á–∞ 9.2c: –°–æ–∑–¥–∞–π enum –¥–ª—è —Å—Ç–∞—Ç—É—Å–æ–≤ –∑–∞–∫–∞–∑–∞ –∏ —Ñ—É–Ω–∫—Ü–∏—é, –∫–æ—Ç–æ—Ä–∞—è –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Å—Ç–∞—Ç—É—Å–∞")
        
        enum OrderStatus {
            case created
            case paid
            case shipped
            case delivered
            case cancelled
        }
        
        func getStatusDescription(status: OrderStatus) -> String {
            switch status { // –¥–ª—è –∫–∞–∂–¥–æ–≥–æ case –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ
            case .created:
                return "–ó–∞–∫–∞–∑ —Å–æ–∑–¥–∞–Ω"
            case .paid:
                return "–ó–∞–∫–∞–∑ –æ–ø–ª–∞—á–µ–Ω"
            case .shipped:
                return "–ó–∞–∫–∞–∑ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω"
            case .delivered:
                return "–ó–∞–∫–∞–∑ –¥–æ—Å—Ç–∞–≤–ª–µ–Ω"
            case .cancelled:
                return "–ó–∞–∫–∞–∑ –æ—Ç–º–µ–Ω–µ–Ω"
            }
        }
        
        // 1. –î–æ–±–∞–≤–ª—è–µ–º —Ñ—É–Ω–∫—Ü–∏–∏ —Å –ª–æ–≥–∏–∫–æ–π
        func canCancelOrder(status: OrderStatus) -> Bool {
            switch status {
            case .created, .paid: return true
            case .shipped, .delivered, .cancelled: return false
            }
        }
        
        func getNextStatus(current: OrderStatus) -> OrderStatus? {
            switch current {
            case .created: return .paid
            case .paid: return .shipped
            case .shipped: return .delivered
            default: return nil
            }
        }
        // 2. –¢–µ—Å—Ç–∏—Ä—É–µ–º –í–°–ï —Å—Ç–∞—Ç—É—Å—ã —Å –Ω–æ–≤–æ–π –ª–æ–≥–∏–∫–æ–π
        
        // –ø—Ä–æ—Ç–µ—Å—Ç–∏—Ä—É–µ–º –≤—Å–µ —Å—Ç–∞—Ç—É—Å—ã
        let allStatuses: [OrderStatus] = [.created, .paid, .shipped, .delivered]
        
        // –ë–æ–ª–µ–µ –∫—Ä–∞—Å–∏–≤—ã–π –≤—ã–≤–æ–¥ —Å—Ç–∞—Ç—É—Å–æ–≤
        func getStatusEmoji(status: OrderStatus) -> String {
            switch status {
            case .created: return "üìù"
            case .paid: return "üí≥"
            case .shipped: return "üöö"
            case .delivered: return "üì¶"
            case .cancelled: return "‚ùå"
            }
        }

        for status in allStatuses {
            let emoji = getStatusEmoji(status: status)
            let cancelIcon = canCancelOrder(status: status) ? "‚úÖ" : "‚ùå"
            
            print("\(emoji) \(getStatusDescription(status: status))")
            print("   –û—Ç–º–µ–Ω–∞: \(cancelIcon)")
            
            if let next = getNextStatus(current: status) {
                print("   ‚û°Ô∏è –°–ª–µ–¥—É—é—â–∏–π: \(getStatusDescription(status: next))")
            }
            print()
        }
        /*  üìù –ó–∞–∫–∞–∑ —Å–æ–∑–¥–∞–Ω
                –û—Ç–º–µ–Ω–∞: ‚úÖ
                ‚û°Ô∏è –°–ª–µ–¥—É—é—â–∏–π: –ó–∞–∫–∞–∑ –æ–ø–ª–∞—á–µ–Ω

            üí≥ –ó–∞–∫–∞–∑ –æ–ø–ª–∞—á–µ–Ω
                –û—Ç–º–µ–Ω–∞: ‚úÖ
                ‚û°Ô∏è –°–ª–µ–¥—É—é—â–∏–π: –ó–∞–∫–∞–∑ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω

            üöö –ó–∞–∫–∞–∑ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω
                –û—Ç–º–µ–Ω–∞: ‚ùå
                ‚û°Ô∏è –°–ª–µ–¥—É—é—â–∏–π: –ó–∞–∫–∞–∑ –¥–æ—Å—Ç–∞–≤–ª–µ–Ω

            üì¶ –ó–∞–∫–∞–∑ –¥–æ—Å—Ç–∞–≤–ª–µ–Ω
                –û—Ç–º–µ–Ω–∞: ‚ùå   */
    }
    
    static func task9_2d() {
        print("–ó–∞–¥–∞—á–∞ 9.2d.d: –°–æ–∑–¥–∞–π enum –¥–ª—è —Å—Ç–∞—Ç—É—Å–æ–≤ –∑–∞–¥–∞—á–∏ 'To-DO' –∏ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –Ω–∏–º–∏.")
        
        enum TaskStatus {
            case new
            case inProgress
            case paused
            case completed
            case cancelled
        }
        
        func getTaskDescription(status: TaskStatus) -> String {
            switch status { // –¥–ª—è –∫–∞–∂–¥–æ–≥–æ case –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ
            case .new: return "–ù–æ–≤–∞—è –∑–∞–¥–∞—á–∞"
            case .inProgress: return "–ó–∞–¥–∞—á–∞ –≤ —Ä–∞–±–æ—Ç–µ"
            case .paused: return "–ó–∞–¥–∞—á–∞ –Ω–∞ –ø–∞—É–∑–µ"
            case .completed: return "–ó–∞–¥–∞—á–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞"
            case .cancelled: return "–ó–∞–¥–∞—á–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞"
            }
        }
        // 1. –î–æ–±–∞–≤–ª—è–µ–º —Ñ—É–Ω–∫—Ü–∏–∏ —Å –ª–æ–≥–∏–∫–æ–π
        func canEditTask(status: TaskStatus) -> Bool {
            switch status {
            case .new, .inProgress, .paused: return true
            case .completed, .cancelled: return false
            }
        }
        
        func getNextPossibleStatus(current: TaskStatus) -> [TaskStatus] {
            switch current {
            case .new: return [.inProgress, .cancelled]
            case .inProgress: return [.cancelled, .completed, .paused]
            case .paused: return [.inProgress, .cancelled]
            case .completed: return []
            case .cancelled: return []
            }
        }
        // ¬†–ü—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å –í–°–ï —Å—Ç–∞—Ç—É—Å—ã
        let allStatuses: [TaskStatus] = [.new, .inProgress, .paused, .completed, .cancelled]
        
        for status in allStatuses {
            print("–°—Ç–∞—Ç—É—Å: \(getTaskDescription(status: status))")
            print("–ú–æ–∂–Ω–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å: \(canEditTask(status: status))")
            
            // –ü–ï–†–ï–ù–ï–°–ò –≠–¢–û–¢ –ö–û–î –°–Æ–î–ê, –í–ù–£–¢–†–¨ –¶–ò–ö–õ–ê:
            let nextStatuses = getNextPossibleStatus(current: status)
            if nextStatuses.isEmpty {
                print("–°–ª–µ–¥—É—é—â–∏–µ –≤–æ–∑–º–æ–∂–Ω—ã–µ —Å—Ç–∞—Ç—É—Å—ã: –Ω–µ—Ç")
            } else {
                let statusNames = nextStatuses.map { getTaskDescription(status: $0) }
                print("–°–ª–µ–¥—É—é—â–∏–µ –≤–æ–∑–º–æ–∂–Ω—ã–µ —Å—Ç–∞—Ç—É—Å—ã: \(statusNames.joined(separator: ", "))")
            }
            print("---")
        }
        /*  –ó–∞–¥–∞—á–∞ 9.2d.d: –°–æ–∑–¥–∞–π enum –¥–ª—è —Å—Ç–∞—Ç—É—Å–æ–≤ –∑–∞–¥–∞—á–∏ 'To-DO' –∏ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –Ω–∏–º–∏.
         –°—Ç–∞—Ç—É—Å: –ù–æ–≤–∞—è –∑–∞–¥–∞—á–∞
         –ú–æ–∂–Ω–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å: true
         –°–ª–µ–¥—É—é—â–∏–µ –≤–æ–∑–º–æ–∂–Ω—ã–µ —Å—Ç–∞—Ç—É—Å—ã: –ó–∞–¥–∞—á–∞ –≤ —Ä–∞–±–æ—Ç–µ, –ó–∞–¥–∞—á–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞
         ---
         –°—Ç–∞—Ç—É—Å: –ó–∞–¥–∞—á–∞ –≤ —Ä–∞–±–æ—Ç–µ
         –ú–æ–∂–Ω–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å: true
         –°–ª–µ–¥—É—é—â–∏–µ –≤–æ–∑–º–æ–∂–Ω—ã–µ —Å—Ç–∞—Ç—É—Å—ã: –ó–∞–¥–∞—á–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞, –ó–∞–¥–∞—á–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞, –ó–∞–¥–∞—á–∞ –Ω–∞ –ø–∞—É–∑–µ
         ---
         –°—Ç–∞—Ç—É—Å: –ó–∞–¥–∞—á–∞ –Ω–∞ –ø–∞—É–∑–µ
         –ú–æ–∂–Ω–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å: true
         –°–ª–µ–¥—É—é—â–∏–µ –≤–æ–∑–º–æ–∂–Ω—ã–µ —Å—Ç–∞—Ç—É—Å—ã: –ó–∞–¥–∞—á–∞ –≤ —Ä–∞–±–æ—Ç–µ, –ó–∞–¥–∞—á–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞
         ---
         –°—Ç–∞—Ç—É—Å: –ó–∞–¥–∞—á–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞
         –ú–æ–∂–Ω–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å: false
         –°–ª–µ–¥—É—é—â–∏–µ –≤–æ–∑–º–æ–∂–Ω—ã–µ —Å—Ç–∞—Ç—É—Å—ã: –Ω–µ—Ç
         ---
         –°—Ç–∞—Ç—É—Å: –ó–∞–¥–∞—á–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞
         –ú–æ–∂–Ω–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å: false
         –°–ª–µ–¥—É—é—â–∏–µ –≤–æ–∑–º–æ–∂–Ω—ã–µ —Å—Ç–∞—Ç—É—Å—ã: –Ω–µ—Ç   */
        // –î–û–ë–ê–í–¨ –≠–¢–û–¢ –ö–û–î –í –ö–û–ù–ï–¶ –§–£–ù–ö–¶–ò–ò (–≤ main –≤–µ—Ç–∫–µ):
        func canReopenTask(status: TaskStatus) -> Bool {
            return status == .cancelled
        }
        
        
        
        
    }
        
    static func task9_2e() {
        print("–ó–∞–¥–∞—á–∞ 9.2.e:")
    }
    
    static func task9_2f() {
        print("–ó–∞–¥–∞—á–∞ 9.2.f:")
    }
    
    static func task9_2g() {
        print("–ó–∞–¥–∞—á–∞ 9.2.g:")
    }
    
    static func task9_3() {
        print("–ó–∞–¥–∞—á–∞ 9.3: ")
    }
    static func task9_4() {
        print("–ó–∞–¥–∞—á–∞ 9.4: ")
    }
}
