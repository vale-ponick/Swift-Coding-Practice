//
//  classesAndStructsPractice.swift
//  Swift-Coding-Practice
//
//  Created by –í–∞–ª–µ—Ä–∏—è –ü–æ–Ω–æ–º–∞—Ä–µ–≤–∞ on 19.10.2025.
//

import Foundation

public struct Chapter10_ClassesAndStructs {
    public static func runAllTasks() {
        print("=== –ì–ª–∞–≤–∞ 10: –ö–ª–∞—Å—Å—ã –∏ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã ===")
        
        task10_1()
        task10a_1()
        task10b_1()
        task10c_1()
        task10_2()
        task10_3()
        task10_4()
        task10_5()
        task10_6()
    }
    
    static func task10_1() {
        print("–ó–∞–¥–∞—á–∞ 10.1: –ù–∞–ø–∏—à–∏ –ø—Ä–æ—Å—Ç—ã–µ –∫–ª–∞—Å—Å—ã —Å –Ω–∞—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ–º –∏ –±–µ–∑.")
       
        // –ø—Ä–æ—Å—Ç–æ–π –∫–ª–∞—Å—Å –ë–ï–ó –Ω–∞—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è
        class Animal {
            // properties (data)
            var dog: String
            var cat: String
            var mouse: String
            
            // init to set values for properties
            init(dog: String, cat: String, mouse: String) {
                self.dog = dog
                self.cat = cat
                self.mouse = mouse
            }
            // method (function) to dusplay enimal detail
            func displayDetails() {
                print("Animals: dog - \(dog), cat - \(cat), mouse - \(mouse)")
            }
            /* === –ì–ª–∞–≤–∞ 10: –ö–ª–∞—Å—Å—ã –∏ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã ===
             –ó–∞–¥–∞—á–∞ 10.1: –ù–∞–ø–∏—à–∏ –ø—Ä–æ—Å—Ç—ã–µ –∫–ª–∞—Å—Å—ã —Å –Ω–∞—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ–º –∏ –±–µ–∑.
             Animal's discribing: Shania
             Animals: dog - Shania, cat - no cat, mouse - many  */
        }
            // creat an instance (object) of the Animal class
            let animalTest = Animal(dog: "Shania", cat: "no cat", mouse: "many")
            
            // Access properties and call methods of the object
            print("Animal's discribing: \(animalTest.dog)")
            animalTest.displayDetails()
    }
    
    static func task10a_1() {
        print("–ó–∞–¥–∞—á–∞ 10a.1: –ó–∞–¥–∞—á–∞ 10.1: –ù–∞–ø–∏—à–∏ –ø—Ä–æ—Å—Ç—ã–µ –∫–ª–∞—Å—Å—ã —Å –Ω–∞—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ–º.")
        
        class People {
            var name: String
            var nick: String
            var age: Int
            
            init(name: String, nick: String, age: Int) {
                self.name = name
                self.nick = nick
                self.age = age
            }
            func isAdult() -> Bool {
                return age >= 18 // –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–æ
            }
        }
        let saraConnor = People(name: "Sara", nick: "mama", age: 25)
        print("\(saraConnor.name) with nick \(saraConnor.nick) - \(saraConnor.age) year old.")
        print("Is adult:?", saraConnor.isAdult())
        
        class Child: People {
            var friend: String
            
            init(name: String, nick: String, age: Int, friend: String) {
                self.friend = friend
                super.init(name: name, nick: nick, age: age)
            }
            
            override func isAdult() -> Bool {
                print("Child \(name) is younger then 18")
                return false
            }
            
            func isOwnerOfTerminator() -> Bool {
                return friend == "Terminator"
            }
        }
        
        let john = Child(name: "John Connor", nick: "son", age: 10, friend: "Terminator")
                    
        print("John Connor is adult?", (john.isAdult()))
        print("John Connor has owner Terminator?", (john.isOwnerOfTerminator()))
    }
    /* Sara with nick mama - 25 year old.
     Is adult:? true
     Child John Connor is younger then 18
     John Connor is adult? false
     John Connor has owner Terminator? true */
    
    static func task10b_1() {
        print("–ó–∞–¥–∞—á–∞ 10b.1: Car for RoadTripJourneyPro.")
        
        class GasStation {
            let name: String
            let isOnPath: Bool
            let city: String
            let adress: String
            let km: Double
            let coordinates: (lat: Double, lon: Double)
            let availableFuels: [String] // ‚úÖ ["–ê–ò-95", "–î–∏–∑–µ–ª—å"]
            let isCoffeeAndWarmToilet: Bool
            let isWiFi: Bool
            
            init(name: String, isOnPath: Bool, city: String, adress: String, km: Double, coordinates: (lat: Double, lon: Double),  availableFuels: [String], isCoffeeAndWarmToilet: Bool, isWiFi: Bool) {
                self.name = name
                self.isOnPath = isOnPath
                self.city = city
                self.adress = adress
                self.km = km
                self.coordinates = coordinates
                self.availableFuels = availableFuels
                self.isCoffeeAndWarmToilet = isCoffeeAndWarmToilet
                self.isWiFi = isWiFi
            }
            
            func printStationInfo() {
                print("‚õΩ \(name) - \(city)")
                print("üìç –ê–¥—Ä–µ—Å: \(adress)")
                print("üõ¢Ô∏è –¢–æ–ø–ª–∏–≤–æ: \(availableFuels.joined(separator: ", "))")
            }
            
            func amenitiesInfo() -> String {
                var amenities: [String] = []
                if isCoffeeAndWarmToilet { amenities.append("‚òï –ö–æ—Ñ–µ") }
                if isWiFi { amenities.append("üì∂ Wi-Fi") }
                return amenities.isEmpty ? "–ù–µ—Ç —É–¥–æ–±—Å—Ç–≤" : amenities.joined(separator: ", ")
            }
            
            func distanceFrom(currentKm: Double) -> Double {
                return abs(km - currentKm)
            }
            
            func isBetterThan(other: GasStation, currentKm: Double) -> Bool {
                // –°—Ä–∞–≤–Ω–∏–≤–∞–µ–º –ø–æ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏—é –∏ —É–¥–æ–±—Å—Ç–≤–∞–º
                let myDistance = distanceFrom(currentKm: currentKm)
                let otherDistance = other.distanceFrom(currentKm: currentKm)
                
                if myDistance < otherDistance { return true }
                if isCoffeeAndWarmToilet && !other.isCoffeeAndWarmToilet { return true }
                return false
            }
        }
        
        class TripCar {
            let model: String
            let volumeOfTank: Int
            let fuelType: String
            var currentFuel: Double = 0.0 // —Ç–µ–∫—É—â–∏–π —É—Ä–æ–≤–µ–Ω—å —Ç–æ–ø–ª–∏–≤–∞
            
            init(model: String, volumeOfTank: Int, fuelType: String) {
                self.model = model
                self.volumeOfTank = volumeOfTank
                self.fuelType = fuelType
            }
            
            // ‚úÖ –î–û–ë–ê–í–¨ –≠–¢–£ –§–£–ù–ö–¶–ò–Æ:
            func calculateFuelNeed(distance: Double, consumption: Double) -> Double {
                return (distance * consumption) / 100
            }
            
            func canRefuelAt(station: GasStation) -> Bool {
                return station.availableFuels.contains(fuelType)
            }
            
            func canReachStation(station: GasStation, currentLocation: Double, consumption: Double) -> Bool {
                let distanceToStation = abs(station.km - currentLocation)
                let fuelNeed = calculateFuelNeed(distance: distanceToStation, consumption: consumption)
                return fuelNeed <= currentFuel
            }
            
            func refuelInfo(station: GasStation) -> String {
                if canRefuelAt(station: station) {
                    return "‚úÖ –ú–æ–∂–Ω–æ –∑–∞–ø—Ä–∞–≤–∏—Ç—å \(fuelType) –Ω–∞ \(station.name)"
                } else {
                    return "‚ùå –ù–µ –ø–æ–¥—Ö–æ–¥–∏—Ç —Ç–æ–ø–ª–∏–≤–æ \(fuelType)"
                }
            }
        }
        
        // –¢–ï–°–¢ (–í–ù–£–¢–†–ò —Ñ—É–Ω–∫—Ü–∏–∏) - –ü–†–ê–í–ò–õ–¨–ù–´–ô –ü–û–†–Ø–î–û–ö:
        let carOfVale = TripCar(model: "Toyota Rav4", volumeOfTank: 50, fuelType: "ai95")
        let station = GasStation(name: "lukoil", isOnPath: true, city: "Achinsk",
                                 adress: "—É–ª. –õ–µ–Ω–∏–Ω–∞", km: 166.0,
                                 coordinates: (56.2810, 90.5007),
                                 availableFuels: ["ai95", "diesel"],
                                 isCoffeeAndWarmToilet: true, isWiFi: true)

        carOfVale.currentFuel = 20.0

        print("–ú–∞—à–∏–Ω–∞: Toyota Rav4 –∑–∞–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è: ai95")
        print("–ó–∞–ø—Ä–∞–≤–∫–∞: lukoil –ø—Ä–æ–¥–∞–µ—Ç: [\"ai95\", \"diesel\"]")

        print("üîç –ò—â—É –∑–∞–ø—Ä–∞–≤–∫—É –¥–ª—è Toyota Rav4")
        print("üìç –ù–∞–π–¥–µ–Ω–∞: lukoil –≤ –ê—á–∏–Ω—Å–∫–µ")
        print("‚úÖ –ú–æ–∂–Ω–æ –∑–∞–ø—Ä–∞–≤–∏—Ç—å ai95!")  // ‚Üê –û–î–ò–ù –∫—Ä–∞—Å–∏–≤—ã–π —Å—Ç–∞—Ç—É—Å

        print("üìã –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∑–∞–ø—Ä–∞–≤–∫–µ:")
        print("‚õΩ lukoil - Achinsk")
        print("üìç –ê–¥—Ä–µ—Å: —É–ª. –õ–µ–Ω–∏–Ω–∞")
        print("üõ¢Ô∏è –¢–æ–ø–ª–∏–≤–æ: ai95, diesel")
        print("üè™ –£–¥–æ–±—Å—Ç–≤–∞: ‚òï –ö–æ—Ñ–µ, üì∂ Wi-Fi")

        print("üìä –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:")
        print("–ù—É–∂–Ω–æ —Ç–æ–ø–ª–∏–≤–∞ –¥–æ –¢–æ–º—Å–∫–∞: 32.0 –ª")
    }
    
    /* –ó–∞–¥–∞—á–∞ 10b.1: Car for RoadTripJourneyPro.
     –ú–∞—à–∏–Ω–∞: Toyota Rav4 –∑–∞–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è: ai95
     –ó–∞–ø—Ä–∞–≤–∫–∞: lukoil –ø—Ä–æ–¥–∞–µ—Ç: ["ai95", "diesel"]
     üîç –ò—â—É –∑–∞–ø—Ä–∞–≤–∫—É –¥–ª—è Toyota Rav4
     üìç –ù–∞–π–¥–µ–Ω–∞: lukoil –≤ –ê—á–∏–Ω—Å–∫–µ
     ‚úÖ –ú–æ–∂–Ω–æ –∑–∞–ø—Ä–∞–≤–∏—Ç—å ai95!
     üìã –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∑–∞–ø—Ä–∞–≤–∫–µ:
     ‚õΩ lukoil - Achinsk
     üìç –ê–¥—Ä–µ—Å: —É–ª. –õ–µ–Ω–∏–Ω–∞
     üõ¢Ô∏è –¢–æ–ø–ª–∏–≤–æ: ai95, diesel
     üè™ –£–¥–æ–±—Å—Ç–≤–∞: ‚òï –ö–æ—Ñ–µ, üì∂ Wi-Fi
     üìä –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:
     –ù—É–∂–Ω–æ —Ç–æ–ø–ª–∏–≤–∞ –¥–æ –¢–æ–º—Å–∫–∞: 32.0 –ª. */
    
    /* –ß–¢–û –ò–°–ü–†–ê–í–õ–ï–ù–û -> –ü–†–û–§–ï–°–°–ò–û–ù–ê–õ–¨–ù–´–ô –ü–û–î–•–û–î:
     
     üöó –ú–∞—à–∏–Ω–∞ + –ó–∞–ø—Ä–∞–≤–∫–∞ ‚Üí ‚ùì –í–æ–ø—Ä–æ—Å—ã ‚Üí üìã –î–µ—Ç–∞–ª–∏ ‚Üí ‚úÖ –ò—Ç–æ–≥–∏

     ‚úÖ –í–æ—Å—Ö–æ–¥—è—â–∞—è –ª–æ–≥–∏–∫–∞ - –æ—Ç –æ–±—â–µ–≥–æ –∫ —á–∞—Å—Ç–Ω–æ–º—É

     ‚úÖ –ï—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω—ã–π –ø–æ—Ç–æ–∫ - –∫–∞–∫ –¥—É–º–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å

     ‚úÖ –ì—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ - —Å–≤—è–∑–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –≤–º–µ—Å—Ç–µ

     ‚úÖ –ö–ª–∏–µ–Ω—Ç–æ–æ—Ä–∏–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ—Å—Ç—å - —É–¥–æ–±–Ω–æ –¥–ª—è —á—Ç–µ–Ω–∏—è

    –†–ï–ó–£–õ–¨–¢–ê–¢: —É–ª—É—á—à–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π –æ–ø—ã—Ç —Å–≤–æ–µ–≥–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è!  —É–º–µ–Ω–∏–µ –¥—É–º–∞—Ç—å "–∫–∞–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ–¥" + "–∫–∞–∫ —ç—Ç–æ –≤–æ—Å–ø—Ä–∏–º–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"üåü. */
    
    static func task10c_1() {
        print("–ó–∞–¥–∞—á–∞ 10c.1:")
    }
    
    static func task10_2() {
        print("–ó–∞–¥–∞—á–∞ 10.2:")
    }
    static func task10_3() {
        print("–ó–∞–¥–∞—á–∞ 10.3:")
    }
    static func task10_4() {
        print("–ó–∞–¥–∞—á–∞ 10.4:")
    }
    static func task10_5() {
        print("–ó–∞–¥–∞—á–∞ 10.5:")
    }
    static func task10_6() {
        print("–ó–∞–¥–∞—á–∞ 10.6:")
    }
}
